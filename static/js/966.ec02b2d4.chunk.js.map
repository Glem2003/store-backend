{"version":3,"file":"static/js/966.ec02b2d4.chunk.js","mappings":"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","sources":["hooks/useIsMobile.tsx","hooks/useFetchData.tsx","components/common/imageUpload/imageUpload.tsx","components/common/fieldset/fieldset.tsx","utils/uploadImageToCloudinary.tsx","hooks/useProductForm.tsx","data/revisionData.ts","pages/revision.tsx","data/productsData.tsx","config/apiConfig.ts"],"sourcesContent":["// hooks\r\nimport { useMediaQuery, useTheme } from \"@mui/material\"\r\n\r\n// type\r\nimport { Breakpoint } from \"@mui/material\"\r\n\r\nconst useIsMobile = (breakpoints: Breakpoint) => {\r\n\r\n    const theme = useTheme();\r\n    const isMobile = useMediaQuery(theme.breakpoints.down(breakpoints))\r\n\r\n    return { isMobile }\r\n}\r\n\r\nexport default useIsMobile","import { useState, useEffect } from \"react\"\r\n\r\nfunction useFetchData<T>(route: string): { data: T | null; loading: boolean; error: string | null } {\r\n\r\n    const [data, setData] = useState<T | null>(null)\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n\r\n            setLoading(true)\r\n            setError(null)\r\n\r\n            try {\r\n                const res = await fetch(`${route}`)\r\n\r\n                if (!res.ok) throw new Error(`HTTP error ${res.status}`)\r\n                const data: T = await res.json()\r\n                setData(data)\r\n            }\r\n            catch (err: any) {\r\n                console.error(`[useFetchData] ${route}`, err)\r\n                setError(err.message) // Failed to fetch\r\n            }\r\n            finally {\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n\r\n    }, [route])\r\n\r\n    return { data, loading, error }\r\n}\r\n\r\nexport default useFetchData","// components\r\nimport { Box, Button, Avatar } from \"@mui/material\"\r\nimport PhotoCamera from '@mui/icons-material/PhotoCamera';\r\n\r\n// hooks\r\nimport { useTranslation } from 'react-i18next';\r\nimport useIsMobile from '../../../hooks/useIsMobile';\r\n\r\n// type\r\nimport { imagesUploadType } from \"./imagesUpload.type\";\r\n\r\nconst ImagesUpload: React.FC<imagesUploadType> = (props) => {\r\n\r\n    const { t } = useTranslation()\r\n    const { isMobile } = useIsMobile('sm')\r\n    const { value, onChange } = props\r\n\r\n    return (\r\n        <Box\r\n            display='flex'\r\n            flexDirection={isMobile ? 'row' : 'column'}\r\n            alignItems='center'\r\n            gap={2}\r\n        >\r\n\r\n            <Avatar\r\n                variant='rounded'\r\n                src={value || ''}\r\n                sx={{\r\n                    minWidth: isMobile ? 60 : 120,\r\n                    height: isMobile ? 60 : 120,\r\n                    border: '1px solid #ccc'\r\n                }}\r\n            />\r\n\r\n            <input\r\n                accept=\"image/*\"\r\n                id=\"upload-image\"\r\n                type=\"file\"\r\n                style={{ display: 'none' }}\r\n                onChange={onChange}\r\n            />\r\n            <label htmlFor=\"upload-image\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    component=\"span\"\r\n                    startIcon={<PhotoCamera />}\r\n                    size={isMobile ? 'small' : 'medium'}\r\n                >\r\n                    {t('select_image')}\r\n                </Button>\r\n            </label>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ImagesUpload","// components\r\nimport {\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormLabel,\r\n    Switch,\r\n} from \"@mui/material\"\r\n\r\n// hooks\r\nimport { useTranslation } from \"react-i18next\"\r\n\r\n// types\r\nimport { fieldsetProps } from \"./fieldset.type\"\r\n\r\nconst Fieldset: React.FC<fieldsetProps> = (props) => {\r\n\r\n    const { t } = useTranslation()\r\n    const { label, isActive, onChange } = props\r\n\r\n    return (\r\n        <FormControl\r\n            component=\"fieldset\"\r\n            sx={{ border: '1px solid gray', p: 1, borderRadius: 1, minWidth: 150 }}\r\n        >\r\n            <FormLabel component=\"legend\">{t(label)}</FormLabel>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch\r\n                        checked={isActive}\r\n                        onChange={(e) => onChange(e.target.checked)}\r\n                    />}\r\n                label={isActive ? t('active') : t('disabled')}\r\n                labelPlacement=\"start\"\r\n            />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default Fieldset","// config\r\nimport { CLOUDINARY_API } from \"../config/apiConfig\"\r\n\r\nconst uploadImageToCloudinary = async (file: File): Promise<string> => {\r\n    const formData = new FormData()\r\n    formData.append(\"file\", file)\r\n    formData.append(\"upload_preset\", \"store_backend\")\r\n\r\n    const response = await fetch(CLOUDINARY_API, {\r\n        method: \"POST\",\r\n        body: formData\r\n    })\r\n\r\n    if (!response.ok) throw new Error(\"Images upload fail\")\r\n\r\n    const data = await response.json()\r\n    return data.secure_url\r\n}\r\n\r\nexport default uploadImageToCloudinary ","// hooks\r\nimport { useState, useEffect, useCallback } from \"react\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { useTranslation } from \"react-i18next\"\r\n\r\n// type\r\nimport { categoriesType } from \"../types/categoriesType.type\"\r\nimport { productsDataType } from \"../types/ProductsAPI.type\"\r\nimport uploadImageToCloudinary from \"../utils/uploadImageToCloudinary\"\r\n\r\n// data\r\nimport ProductsData from \"../data/productsData\";\r\n\r\n// config\r\nimport { PRODUCTS_API } from \"../config/apiConfig\"\r\n\r\nconst useProductForm = () => {\r\n\r\n    const { data, error, loading } = ProductsData()\r\n\r\n    const { t } = useTranslation()\r\n\r\n    const {\r\n        register,\r\n        reset,\r\n        setValue,\r\n        watch,\r\n        control,\r\n        trigger,\r\n        setError,\r\n        formState: { errors }\r\n    } = useForm<productsDataType>({\r\n        mode: \"onBlur\",\r\n        defaultValues: {\r\n            id: \"\",\r\n            name: \"\",\r\n            price: 0,\r\n            qty: 0,\r\n            mainCategory: '',\r\n            subCategory: '',\r\n            status: false,\r\n            images: null\r\n        }\r\n    })\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const watchedSKU = watch('id')\r\n    const watchName = watch('name')\r\n    const watchedPrice = watch('price')\r\n    const watchedQty = watch('qty')\r\n    const watchedStatus = watch('status')\r\n    const watchedMainCategory = watch('mainCategory')\r\n    const watchedSubCategory = watch('subCategory')\r\n    const watchedImages = watch('images')\r\n\r\n    const [categoryOptions, setCategoryOptions] = useState<categoriesType>({})\r\n    const [imageFile, setImagesFile] = useState<File | null>(null)\r\n\r\n    const convertToArray = (data: any) => {\r\n        const categoryMap: Record<string, Set<string>> = {}\r\n        for (const { mainCategory, subCategory } of data) {\r\n            if (!mainCategory || !subCategory) continue\r\n            if (!categoryMap[mainCategory]) {\r\n                categoryMap[mainCategory] = new Set()\r\n            }\r\n            categoryMap[mainCategory].add(subCategory)\r\n        }\r\n\r\n        const result: Record<string, string[]> = {}\r\n        for (const [main, subSet] of Object.entries(categoryMap)) {\r\n            result[main] = Array.from(subSet)\r\n        }\r\n        return result\r\n    }\r\n\r\n    const handleMainCategoryChange = (value: string) => {\r\n        setCategoryOptions((prev) => {\r\n            if (!prev[value]) {\r\n                return {\r\n                    ...prev,\r\n                    [value]: []\r\n                }\r\n            }\r\n            return prev\r\n        })\r\n    }\r\n\r\n    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0]\r\n\r\n        if (!file) return\r\n\r\n        const reader = new FileReader()\r\n        reader.onload = () => {\r\n            const base64 = reader.result as string\r\n            setValue(\"images\", base64)\r\n            setImagesFile(file)\r\n        }\r\n        reader.onerror = (error) => {\r\n            console.log('FileReader error:', error)\r\n        }\r\n        reader.readAsDataURL(file)\r\n        if (file) {\r\n            setImagesFile(file)\r\n            const reader = new FileReader()\r\n            reader.onload = () => {\r\n                setValue(\"images\", reader.result as string)\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n    }\r\n\r\n    const handleAdd = async () => {\r\n\r\n        const isValid = await trigger()\r\n\r\n        if (!isValid) {\r\n            console.warn('表單驗證失敗，停止儲存')\r\n            return\r\n        }\r\n\r\n        const res = await fetch(PRODUCTS_API)\r\n        const existingProducts = await res.json()\r\n\r\n        const currentSKU = watch('id')\r\n\r\n        const skuExists = existingProducts.some((item: productsDataType) => item.id === currentSKU)\r\n        if (skuExists) {\r\n            setError('id', {\r\n                type: 'manual',\r\n                message: t('sku_already_exists')\r\n            })\r\n            return\r\n        }\r\n\r\n        let imagesUrl = watch('images')\r\n        if (!error && imageFile) {\r\n            imagesUrl = await uploadImageToCloudinary(imageFile)\r\n        }\r\n\r\n        const payload = {\r\n            id: watchedSKU,\r\n            name: watchName,\r\n            price: watchedPrice,\r\n            qty: watchedQty,\r\n            mainCategory: watchedMainCategory,\r\n            subCategory: watchedSubCategory,\r\n            status: watchedStatus,\r\n            images: imagesUrl,\r\n            updatedAt: new Date()\r\n        }\r\n\r\n        await fetch(PRODUCTS_API, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        })\r\n\r\n        console.log(payload)\r\n        alert('新增成功')\r\n\r\n        navigate('/backend/products')\r\n        reset()\r\n        setImagesFile(null)\r\n    }\r\n\r\n    const handleSave = async () => {\r\n\r\n        const isValid = await trigger()\r\n\r\n        if (!isValid) {\r\n            console.warn('表單驗證失敗，停止儲存')\r\n            return\r\n        }\r\n\r\n        let imagesUrl = watch('images')\r\n        if (!error && imageFile) {\r\n            imagesUrl = await uploadImageToCloudinary(imageFile)\r\n        }\r\n\r\n        const payload = {\r\n            id: watchedSKU,\r\n            name: watchName,\r\n            price: watchedPrice,\r\n            qty: watchedQty,\r\n            mainCategory: watchedMainCategory,\r\n            subCategory: watchedSubCategory,\r\n            status: watchedStatus,\r\n            images: imagesUrl,\r\n            updatedAt: new Date()\r\n        }\r\n\r\n        await fetch(`${PRODUCTS_API}/${watchedSKU}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        })\r\n\r\n        console.log(payload)\r\n\r\n        alert('成功')\r\n        navigate('/backend/products')\r\n    }\r\n\r\n    const handleReset = () => {\r\n        reset()\r\n        setImagesFile(null)\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n\r\n        if (!watchedSKU) return\r\n\r\n        try {\r\n            const confirmDelete = window.confirm(t(\"are_you_sure_you_want_to_delete_this_data\"))\r\n            if (!confirmDelete) return\r\n\r\n            const res = await fetch(`${PRODUCTS_API}/${watchedSKU}`, {\r\n                method: \"DELETE\",\r\n                headers: { 'Content-Type': 'application/json' }\r\n            })\r\n\r\n            if (!res.ok) throw new Error('刪除失敗')\r\n\r\n            alert(`SKU: ${watchedSKU} 已刪除`)\r\n            navigate('/backend/products')\r\n            reset()\r\n            setImagesFile(null)\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const getFormDataFromId = useCallback(async (id: string) => {\r\n        try {\r\n            const res = await fetch(`${PRODUCTS_API}/${id}`)\r\n            if (!res.ok) throw new Error(\"Https Error\");\r\n            const data = await res.json()\r\n\r\n            if (!data) return\r\n\r\n            const mappedData = {\r\n                id: data.id,\r\n                name: data.name,\r\n                price: Number(data.price),\r\n                qty: Number(data.qty),\r\n                mainCategory: data.mainCategory || '',\r\n                subCategory: data.subCategory || '',\r\n                status: data.status ?? false,\r\n                images: data.images || ''\r\n            }\r\n\r\n            reset(mappedData)\r\n\r\n            if (data.images) {\r\n                setValue(\"images\", data.images)\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }, [reset, setValue])\r\n\r\n    useEffect(() => {\r\n        if (!Array.isArray(data)) return\r\n        const category = convertToArray(data)\r\n\r\n        setCategoryOptions(prev => {\r\n            const isEqual = JSON.stringify(prev) === JSON.stringify(category)\r\n            return isEqual ? prev : category\r\n        })\r\n\r\n    }, [data])\r\n\r\n    return {\r\n        register,\r\n        setValue,\r\n        reset,\r\n        control,\r\n        errors,\r\n        watchedSKU,\r\n        watchName,\r\n        watchedPrice,\r\n        watchedQty,\r\n        watchedStatus,\r\n        watchedMainCategory,\r\n        watchedSubCategory,\r\n        watchedImages,\r\n\r\n        categoryOptions,\r\n        imageFile,\r\n        error,\r\n        loading,\r\n\r\n        setImagesFile,\r\n\r\n        getFormDataFromId,\r\n        handleMainCategoryChange,\r\n        handleImageChange,\r\n        handleAdd,\r\n        handleSave,\r\n        handleReset,\r\n        handleDelete\r\n    }\r\n\r\n}\r\n\r\nexport default useProductForm","// type\r\nimport { ResourceFormConfigs } from \"../types/revisionType\"\r\n\r\nexport const formConfigs: ResourceFormConfigs = {\r\n    product: {\r\n        add: {\r\n            title: 'add_product',\r\n        },\r\n        edit: {\r\n            title: 'edit_product'\r\n        }\r\n    },\r\n    order: {\r\n        add: {\r\n            title: '',\r\n        },\r\n        edit: {\r\n            title: ''\r\n        }\r\n    },\r\n    customers: {\r\n        add: {\r\n            title: '',\r\n        },\r\n        edit: {\r\n            title: ''\r\n        }\r\n    }\r\n}","// components\r\nimport {\r\n    Box,\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    ButtonGroup,\r\n    TextField,\r\n    Autocomplete\r\n} from \"@mui/material\"\r\nimport ImagesUpload from \"../components/common/imageUpload/imageUpload\"\r\nimport Fieldset from \"../components/common/fieldset/fieldset\"\r\nimport { Controller } from \"react-hook-form\"\r\n\r\n// hooks\r\nimport { useEffect } from \"react\"\r\nimport { useParams } from 'react-router-dom'\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport useIsMobile from \"../hooks/useIsMobile\"\r\nimport useProductForm from \"../hooks/useProductForm\"\r\n\r\n// type\r\nimport { RevisionType } from \"../types/revisionType\"\r\n\r\n// data\r\nimport { formConfigs } from \"../data/revisionData\"\r\n\r\nconst Revision: React.FC<RevisionType> = (props) => {\r\n\r\n    const { mode, resource } = props\r\n    const { id } = useParams<{ id: string }>()\r\n    const formConfig = formConfigs[resource]?.[mode]\r\n\r\n    const { isMobile } = useIsMobile('md')\r\n    const { t } = useTranslation()\r\n    const navigate = useNavigate()\r\n\r\n    const {\r\n        register,\r\n        errors,\r\n        control,\r\n\r\n        watchedMainCategory,\r\n        watchedImages,\r\n        categoryOptions,\r\n\r\n        handleReset,\r\n        handleAdd,\r\n        handleSave,\r\n        handleDelete,\r\n        getFormDataFromId,\r\n        handleImageChange\r\n    } = useProductForm()\r\n\r\n    const mainCategories = Object.keys(categoryOptions)\r\n\r\n    useEffect(() => {\r\n        if (id) { getFormDataFromId(id) }\r\n    }, [id, getFormDataFromId])\r\n\r\n    return (\r\n        <Box\r\n            component=\"form\"\r\n            sx={{\r\n                p: 3,\r\n                bgcolor: \"background.paper\",\r\n                borderRadius: 2,\r\n                boxShadow: 2,\r\n                height: 'calc( 100vh - 140px )'\r\n            }}\r\n        >\r\n            <Grid container size={12} height={'100%'}>\r\n                <Grid size={12}>\r\n                    <Typography variant=\"h5\" mb={2} fontWeight={600}>\r\n                        {t(formConfig.title)}\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                {/* Main Form */}\r\n                <Grid\r\n                    container\r\n                    spacing={3}\r\n                    sx={{ overflowY: 'auto', height: 'calc( 100% - 140px )' }}\r\n                >\r\n                    <Grid\r\n                        size={{ xs: 12, md: 8 }}\r\n                        pt={1}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid size={{ xs: 12 }} >\r\n                                <Controller\r\n                                    name=\"id\"\r\n                                    control={control}\r\n                                    rules={{ required: t('this_field_is_required') }}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            {...field}\r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            label=\"SKU\"\r\n                                            required\r\n                                            error={!!errors.id}\r\n                                            helperText={errors.id?.message}\r\n                                            placeholder={t('input_product_serial_number')}\r\n                                            slotProps={{\r\n                                                input: {\r\n                                                    readOnly: mode === 'edit',\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n\r\n                            </Grid>\r\n                            <Grid size={{ xs: 12 }}>\r\n                                <Controller\r\n                                    name=\"name\"\r\n                                    control={control}\r\n                                    rules={{ required: t('this_field_is_required') }}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            {...field}\r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            label={t('product_name')}\r\n                                            required\r\n                                            error={!!errors.name}\r\n                                            helperText={errors.name?.message}\r\n                                        />\r\n                                    )}\r\n                                />\r\n\r\n                            </Grid>\r\n                            <Grid size={{ xs: 12, md: 6 }}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    label={t('price')}\r\n                                    id=\"price\"\r\n                                    type=\"number\"\r\n                                    required\r\n                                    {...register(\"price\", {\r\n                                        required: t('this_field_is_required'),\r\n                                        valueAsNumber: true,\r\n                                        min: {\r\n                                            value: 0,\r\n                                            message: t('price_cannot_be_less_than_0')\r\n                                        }\r\n                                    })}\r\n                                    error={!!errors.price}\r\n                                    helperText={errors.price?.message}\r\n                                />\r\n                            </Grid>\r\n                            <Grid size={{ xs: 12, md: 6 }}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    label={t('quantity')}\r\n                                    id=\"qty\"\r\n                                    type=\"number\"\r\n                                    required\r\n                                    {...register(\"qty\", {\r\n                                        required: t('this_field_is_required'),\r\n                                        valueAsNumber: true,\r\n                                        min: {\r\n                                            value: 0,\r\n                                            message: t('price_cannot_be_less_than_0')\r\n                                        }\r\n                                    })}\r\n                                    error={!!errors.qty}\r\n                                    helperText={errors.qty?.message}\r\n                                />\r\n                            </Grid>\r\n                            <Grid container size={{ xs: 12 }}>\r\n                                <Grid size={6}>\r\n                                    <Controller\r\n                                        name=\"mainCategory\"\r\n                                        control={control}\r\n                                        render={({ field }) => (\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                options={mainCategories}\r\n                                                value={field.value}\r\n                                                onInputChange={(e, value) => field.onChange(value)}\r\n                                                onChange={(e, value) => field.onChange(value || '')}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n                                                        label={t('product_category')}\r\n                                                        variant=\"outlined\"\r\n                                                        placeholder={t('input_or_select_category')}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid size={6}>\r\n                                    <Controller\r\n                                        name=\"subCategory\"\r\n                                        control={control}\r\n                                        render={({ field }) => (\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                value={field.value}\r\n                                                options={Array.isArray(categoryOptions[watchedMainCategory]) ? categoryOptions[watchedMainCategory] : []}\r\n                                                disabled={!watchedMainCategory}\r\n                                                onInputChange={(e, value) => field.onChange(value)}\r\n                                                onChange={(e, value) => field.onChange(value || '')}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n                                                        label={t('subcategory')}\r\n                                                        variant=\"outlined\"\r\n                                                        placeholder={t('input_or_select_subcategory')}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    {/* Images Slide */}\r\n                    <Grid\r\n                        container\r\n                        size={{ xs: 12, md: 4 }}\r\n                        display={isMobile ? 'flex' : 'grid'}\r\n                        gap={isMobile ? 1 : 4}\r\n                        pb={1}\r\n                        sx={{ placeContent: !isMobile ? 'center' : 'space-between' }}\r\n                    >\r\n                        <Grid order={isMobile ? 2 : 1}>\r\n                            <Controller\r\n                                name=\"images\"\r\n                                control={control}\r\n                                render={() => (\r\n                                    <ImagesUpload\r\n                                        value={watchedImages}\r\n                                        onChange={handleImageChange}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                        <Grid order={isMobile ? 1 : 2}>\r\n                            <Controller\r\n                                name=\"status\"\r\n                                control={control}\r\n                                render={({ field }) => (\r\n                                    <Fieldset\r\n                                        label=\"product_status\"\r\n                                        isActive={field.value}\r\n                                        onChange={field.onChange}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* Button Area */}\r\n                <Grid size={12}>\r\n                    <Box\r\n                        mt={4}\r\n                        display=\"flex\"\r\n                        justifyContent=\"center\"\r\n                        gap={2}\r\n                    >\r\n                        <ButtonGroup variant=\"outlined\">\r\n                            <Button onClick={mode === 'add' ? handleAdd : handleSave}>\r\n                                {mode === 'add' ? t(\"add\") : t(\"save\")}\r\n                            </Button>\r\n                            <Button onClick={handleReset}>{t(\"reset\")}</Button>\r\n                            {mode === 'edit' && (\r\n                                <Button\r\n                                    color=\"error\"\r\n                                    onClick={handleDelete}\r\n                                >\r\n                                    {t('delete')}\r\n                                </Button>\r\n                            )}\r\n                        </ButtonGroup>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"error\"\r\n                            onClick={() => navigate(\"/backend/products\")}\r\n                        >\r\n                            {t(\"cancel\")}\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Box >\r\n    )\r\n}\r\n\r\nexport default Revision","// hooks\r\nimport useFetchData from \"../hooks/useFetchData\"\r\n\r\n// type\r\nimport { productsDataType } from \"../types/ProductsAPI.type\";\r\n\r\n// api\r\nimport { PRODUCTS_API } from \"../config/apiConfig\";\r\n\r\nconst ProductsData = () => {\r\n\r\n    const { data, ...rest } = useFetchData<productsDataType[]>(PRODUCTS_API)\r\n    const { error, loading } = useFetchData<productsDataType[]>(PRODUCTS_API)\r\n\r\n    const formattedData = data?.map((item) => ({\r\n        ...item,\r\n        updatedAt: new Date(item.updatedAt)\r\n    })) ?? []\r\n\r\n    return {\r\n        data: formattedData,\r\n        ...rest,\r\n        error,\r\n        loading\r\n    }\r\n}\r\n\r\nexport default ProductsData","const API_BASE = process.env.REACT_APP_API_BASE_URL;\r\n\r\nexport const SUMMARY_API = `${API_BASE}/summary`\r\n\r\nexport const SALE_DATA_WEEKLY_APL = `${API_BASE}/salesWeekly`\r\nexport const SALE_DATA_MONTH_APL = `${API_BASE}/saleMonth`\r\nexport const SALE_DATA_YEARLY_APL = `${API_BASE}/saleYearly`\r\n\r\nexport const PRODUCTS_API = `${API_BASE}/products`\r\n\r\nexport const CLOUDINARY_API = 'https://api.cloudinary.com/v1_1/ddzpuxyjr/image/upload'"],"names":["breakpoints","theme","useTheme","isMobile","useMediaQuery","down","route","data","setData","useState","loading","setLoading","error","setError","useEffect","async","res","fetch","concat","ok","Error","status","json","err","console","message","fetchData","props","t","useTranslation","useIsMobile","value","onChange","_jsxs","Box","display","flexDirection","alignItems","gap","children","_jsx","Avatar","variant","src","sx","minWidth","height","border","accept","id","type","style","htmlFor","Button","color","component","startIcon","PhotoCamera","size","label","isActive","FormControl","p","borderRadius","FormLabel","FormControlLabel","control","Switch","checked","e","target","labelPlacement","formData","FormData","append","file","response","CLOUDINARY_API","method","body","secure_url","useProductForm","ProductsData","register","reset","setValue","watch","trigger","formState","errors","useForm","mode","defaultValues","name","price","qty","mainCategory","subCategory","images","navigate","useNavigate","watchedSKU","watchName","watchedPrice","watchedQty","watchedStatus","watchedMainCategory","watchedSubCategory","watchedImages","categoryOptions","setCategoryOptions","imageFile","setImagesFile","getFormDataFromId","useCallback","_data$status","PRODUCTS_API","mappedData","Number","Array","isArray","category","categoryMap","Set","add","result","main","subSet","Object","entries","from","convertToArray","prev","JSON","stringify","handleMainCategoryChange","_objectSpread","handleImageChange","_e$target$files","files","reader","FileReader","onload","base64","onerror","log","readAsDataURL","handleAdd","warn","existingProducts","currentSKU","some","item","imagesUrl","uploadImageToCloudinary","payload","updatedAt","Date","headers","alert","handleSave","handleReset","handleDelete","window","confirm","formConfigs","product","title","edit","order","customers","_formConfigs$resource","_errors$price","_errors$qty","resource","useParams","formConfig","mainCategories","keys","bgcolor","boxShadow","Grid","container","Typography","mb","fontWeight","spacing","overflowY","xs","md","pt","Controller","rules","required","render","_ref","_errors$id","field","TextField","fullWidth","helperText","placeholder","slotProps","input","readOnly","_ref2","_errors$name","valueAsNumber","min","_ref3","Autocomplete","freeSolo","options","onInputChange","renderInput","params","_ref4","disabled","pb","placeContent","ImagesUpload","_ref5","Fieldset","mt","justifyContent","ButtonGroup","onClick","_data$map","_useFetchData","useFetchData","rest","_objectWithoutProperties","_excluded","formattedData","map","API_BASE","process","SUMMARY_API","SALE_DATA_WEEKLY_APL","SALE_DATA_MONTH_APL","SALE_DATA_YEARLY_APL"],"sourceRoot":""}