{"version":3,"file":"static/js/905.9b3e1029.chunk.js","mappings":"4IAqCA,QAnCA,SAAyBA,GAErB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAmB,OACpCC,EAASC,IAAcF,EAAAA,EAAAA,WAAkB,IACzCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAwB,MA4BlD,OA1BAK,EAAAA,EAAAA,YAAU,KACYC,WAEdJ,GAAW,GACXE,EAAS,MAET,IACI,MAAMG,QAAYC,MAAM,GAADC,OAAIC,kBAAsBD,OAAGZ,IAEpD,IAAKU,EAAII,GAAI,MAAM,IAAIC,MAAM,cAADH,OAAeF,EAAIM,SAC/C,MAAMf,QAAgBS,EAAIO,OAC1Bf,EAAQD,EACZ,CACA,MAAOiB,GACHC,QAAQb,MAAM,kBAADM,OAAmBZ,GAASkB,GACzCX,EAASW,EAAIE,QACjB,CAAC,QAEGf,GAAW,EACf,GAGJgB,KAED,CAACrB,IAEG,CAAEC,OAAMG,UAASE,QAC5B,C,uECnCA,MAAMgB,EAAWT,sCAEJU,EAAW,GAAAX,OAAMU,EAAQ,YAEzBE,EAAoB,GAAAZ,OAAMU,EAAQ,gBAClCG,EAAmB,GAAAb,OAAMU,EAAQ,cACjCI,EAAoB,GAAAd,OAAMU,EAAQ,eAElCK,EAAY,GAAAf,OAAMU,EAAQ,Y,4JCgBvC,EAfqBM,KAAO,IAADC,EAEvB,MAAAC,GAA0BC,EAAAA,EAAAA,GAAiCJ,EAAAA,KAArD,KAAE1B,GAAe6B,EAANE,GAAIC,EAAAA,EAAAA,GAAAH,EAAAI,GAEfC,EAGH,QAHgBN,EAAO,OAAJ5B,QAAI,IAAJA,OAAI,EAAJA,EAAMmC,KAAKC,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC9BD,GAAI,IACPE,UAAW,IAAIC,KAAKH,EAAKE,sBAC1B,IAAAV,EAAAA,EAAI,GAEP,OAAAS,EAAAA,EAAAA,GAAA,CACIrC,KAAMkC,GACHH,I,cCdJ,MAAMS,EAAkB,CAAEC,KAAM,EAAGC,SAAU,GACvCC,EAAwB,CACjC,CAAEC,MAAO,KAAMC,WAAY,OAC3B,CAAED,MAAO,OAAQC,WAAY,2BAAQC,MAAO,MAAKT,EAAAA,EAAAA,GAAA,CAE7CO,MAAO,QACPC,WAAW,gBACRE,EAAAA,GAEP,CAAEH,MAAO,MAAOC,WAAY,eAAMG,KAAM,UACxC,CAAEJ,MAAO,WAAYC,WAAY,4BACjC,CAAED,MAAO,SAAUC,WAAY,2BAAQG,KAAM,WAC7C,CAAEJ,MAAO,YAAaC,WAAY,uCAAUG,KAAM,WAAYF,MAAO,M,2CCHzE,MAqEA,EArEiBG,KAEb,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,MACR,KAAEnD,GAAS2B,IACXyB,GAAWC,EAAAA,EAAAA,OAEVC,EAAWC,IAAgBrD,EAAAA,EAAAA,UAAwB,MAkB1D,OACIsD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,WAAS,EAACC,UAAW,SAAUC,GAAI,CAAEC,OAAQ,yBAA0BN,SAAA,EACzEF,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CAACG,GAAI,CAAEE,KAAM,GAAKC,KAAM,GAAGR,UAC5BF,EAAAA,EAAAA,KAACW,EAAAA,EAAG,CAACJ,GAAI,CAAEC,OAAQ,QAASN,UACxBF,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CACLC,KAAMrE,EACN2C,QAAS2B,EACTC,aAAc,CAAEC,WAAY,CAAEhC,gBAAgB,IAC9CiC,gBAAiB,CAAC,GAClBC,aAAW,EACXC,WA5B6BC,IAC7CA,EAAOC,KAAOvB,EACdC,EAAa,MAEbA,EAAaqB,EAAOC,YA4BhBrB,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CAACG,GAAI,CAAEE,KAAM,YAAcC,KAAM,GAAGR,UACrCF,EAAAA,EAAAA,KAACW,EAAAA,EAAG,CACAJ,GAAI,CACAC,OAAQ,OACRc,QAAS,OACTC,cAAe,SACfC,WAAY,UACdtB,UAEFC,EAAAA,EAAAA,MAACsB,EAAAA,EAAW,CAACf,KAAK,QAAQH,GAAI,CAAEmB,EAAG,GAAIxB,SAAA,EACnCF,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CACHC,UAAU,EACVC,QApCVC,KACdlC,EAAS,aAmCkCM,SAElBR,EAAE,kBAEPM,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CACHC,UAAW9B,EACX+B,QAASA,KAAME,OAtCvBV,EAsCkCvB,GAAa,IArCvDpC,QAAQsE,IAAI,SAAWX,QAC/BzB,EAAS,YAFOyB,OAsCkDnB,SAEzCR,EAAE,8B,kCCvEnC,MAAMuC,EAAoB,IAAIC,KAAKC,aAAa,QAAS,CACrDC,MAAO,WACPC,SAAU,MACVC,sBAAuB,EACvBC,sBAAuB,IAGdhD,EAA2B,CACpCC,KAAM,SACNF,MAAO,IACPkD,eAAiBC,GAAkBR,EAAkBS,OAAOC,OAAOF,I","sources":["hooks/useFetchData.tsx","config/index.ts","data/productsData.tsx","config/productDataGrid.ts","pages/products.tsx","config/twdPrice.ts"],"sourcesContent":["import { useState, useEffect } from \"react\"\r\n\r\nfunction useFetchData<T>(route: string): { data: T | null; loading: boolean; error: string | null } {\r\n\r\n    const [data, setData] = useState<T | null>(null)\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n\r\n            setLoading(true)\r\n            setError(null)\r\n\r\n            try {\r\n                const res = await fetch(`${process.env.PUBLIC_URL}${route}`)\r\n\r\n                if (!res.ok) throw new Error(`HTTP error ${res.status}`)\r\n                const data: T = await res.json()\r\n                setData(data)\r\n            }\r\n            catch (err: any) {\r\n                console.error(`[useFetchData] ${route}`, err)\r\n                setError(err.message)\r\n            }\r\n            finally {\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n\r\n    }, [route])\r\n\r\n    return { data, loading, error }\r\n}\r\n\r\nexport default useFetchData","const API_BASE = process.env.REACT_APP_API_BASE_URL;\r\n\r\nexport const SUMMARY_API = `${API_BASE}/summary`\r\n\r\nexport const SALE_DATA_WEEKLY_APL = `${API_BASE}/salesWeekly`\r\nexport const SALE_DATA_MONTH_APL = `${API_BASE}/saleMonth`\r\nexport const SALE_DATA_YEARLY_APL = `${API_BASE}/saleYearly`\r\n\r\nexport const PRODUCTS_API = `${API_BASE}/products`","// hooks\r\nimport useFetchData from \"../hooks/useFetchData\"\r\n\r\n// type\r\nimport { productsDataType } from \"../types/ProductsAPI.type\";\r\n\r\n// api\r\nimport { PRODUCTS_API } from \"../config\";\r\n\r\nconst ProductsData = () => {\r\n\r\n    const { data, ...rest } = useFetchData<productsDataType[]>(PRODUCTS_API)\r\n\r\n    const formattedData = data?.map((item) => ({\r\n        ...item,\r\n        updatedAt: new Date(item.updatedAt)\r\n    })) ?? []\r\n\r\n    return {\r\n        data: formattedData,\r\n        ...rest\r\n    }\r\n}\r\n\r\nexport default ProductsData","// type\r\nimport { GridColDef } from '@mui/x-data-grid';\r\n\r\n// config\r\nimport { twdPrice } from './twdPrice';\r\n\r\nexport const paginationModel = { page: 0, pageSize: 5 };\r\nexport const columns: GridColDef[] = [\r\n    { field: 'id', headerName: 'SKU' },\r\n    { field: 'name', headerName: '商品名稱', width: 120 },\r\n    {\r\n        field: 'price',\r\n        headerName:'價錢',\r\n        ...twdPrice\r\n    },\r\n    { field: 'qty', headerName: '數量', type: 'number' },\r\n    { field: 'category', headerName: '商品分類' },\r\n    { field: 'status', headerName: '商品狀態', type: 'boolean' },\r\n    { field: 'updatedAt', headerName: '最後更新時間', type: 'dateTime', width: 200 },\r\n]","// components\r\nimport { Box, Grid, Button, ButtonGroup } from \"@mui/material\"\r\nimport { DataGrid, GridEventListener } from '@mui/x-data-grid';\r\n\r\n// data\r\nimport ProductsData from \"../data/productsData\";\r\n\r\n// config\r\nimport { columns as productColumns, paginationModel } from \"../config/productDataGrid\";\r\n\r\n// hooks\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Products = () => {\r\n\r\n    const { t } = useTranslation()\r\n    const { data } = ProductsData()\r\n    const navigate = useNavigate()\r\n\r\n    const [rowDataId, setRowDataId] = useState<number | null>(null)\r\n    const handleSelect: GridEventListener<'rowClick'> = (params) => {\r\n        if (params.id === rowDataId) {\r\n            setRowDataId(null) // Cancel\r\n        } else {\r\n            setRowDataId(params.id as number)\r\n        }\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        navigate('revision')\r\n    }\r\n\r\n    const handleEdit = (id: number) => {\r\n        if (id) console.log('click:' + id)\r\n        navigate('revision')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container direction={'column'} sx={{ height: 'calc( 100vh - 140px )' }}>\r\n                <Grid sx={{ flex: 1 }} size={12}>\r\n                    <Box sx={{ height: '100%' }}>\r\n                        <DataGrid\r\n                            rows={data}\r\n                            columns={productColumns}\r\n                            initialState={{ pagination: { paginationModel } }}\r\n                            pageSizeOptions={[5]}\r\n                            showToolbar\r\n                            onRowClick={handleSelect}\r\n                        />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid sx={{ flex: '0 0 60px' }} size={12}>\r\n                    <Box\r\n                        sx={{\r\n                            height: '100%',\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            alignItems: 'center',\r\n                        }}\r\n                    >\r\n                        <ButtonGroup size=\"large\" sx={{ p: 1 }}>\r\n                            <Button\r\n                                disabled={true || rowDataId != null}\r\n                                onClick={handleAdd}\r\n                            >\r\n                                {t('add_product')}\r\n                            </Button>\r\n                            <Button\r\n                                disabled={!rowDataId}\r\n                                onClick={() => handleEdit(rowDataId || 0)}\r\n                            >\r\n                                {t('edit_product')}\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid >\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Products","// type\r\nimport { GridColTypeDef } from '@mui/x-data-grid';\r\n\r\nconst currencyFormatter = new Intl.NumberFormat('zh-TW', {\r\n    style: 'currency',\r\n    currency: 'TWD',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n});\r\n\r\nexport const twdPrice: GridColTypeDef = {\r\n    type: 'number',\r\n    width: 130,\r\n    valueFormatter: (value: string) => currencyFormatter.format(Number(value)),\r\n};"],"names":["route","data","setData","useState","loading","setLoading","error","setError","useEffect","async","res","fetch","concat","process","ok","Error","status","json","err","console","message","fetchData","API_BASE","SUMMARY_API","SALE_DATA_WEEKLY_APL","SALE_DATA_MONTH_APL","SALE_DATA_YEARLY_APL","PRODUCTS_API","ProductsData","_data$map","_useFetchData","useFetchData","rest","_objectWithoutProperties","_excluded","formattedData","map","item","_objectSpread","updatedAt","Date","paginationModel","page","pageSize","columns","field","headerName","width","twdPrice","type","Products","t","useTranslation","navigate","useNavigate","rowDataId","setRowDataId","_jsx","_Fragment","children","_jsxs","Grid","container","direction","sx","height","flex","size","Box","DataGrid","rows","productColumns","initialState","pagination","pageSizeOptions","showToolbar","onRowClick","params","id","display","flexDirection","alignItems","ButtonGroup","p","Button","disabled","onClick","handleAdd","handleEdit","log","currencyFormatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","valueFormatter","value","format","Number"],"sourceRoot":""}