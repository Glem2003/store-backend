{"version":3,"file":"static/js/752.c108afcd.chunk.js","mappings":"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","sources":["hooks/useIsMobile.tsx","hooks/useFetchData.tsx","config/index.ts","config/twdPrice.ts","utils/formatNumber.ts","components/common/card/infoCard.tsx","components/common/responsiveChart/ResponsiveChart.tsx","data/dashBoardData.tsx","data/quickOperationButton.ts","hooks/useSelectChartDateRange.tsx","config/dashboardOrderDataGrid.ts","pages/dashboard.tsx"],"sourcesContent":["// hooks\r\nimport { useMediaQuery, useTheme } from \"@mui/material\"\r\n\r\n// type\r\nimport { Breakpoint } from \"@mui/material\"\r\n\r\nconst useIsMobile = (breakpoints: Breakpoint) => {\r\n\r\n    const theme = useTheme();\r\n    const isMobile = useMediaQuery(theme.breakpoints.down(breakpoints))\r\n\r\n    return { isMobile }\r\n}\r\n\r\nexport default useIsMobile","import { useState, useEffect } from \"react\"\r\n\r\nfunction useFetchData<T>(route: string): { data: T | null; loading: boolean; error: string | null } {\r\n\r\n    const [data, setData] = useState<T | null>(null)\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n\r\n            setLoading(true)\r\n            setError(null)\r\n\r\n            try {\r\n                const res = await fetch(`${route}`)\r\n\r\n                if (!res.ok) throw new Error(`HTTP error ${res.status}`)\r\n                const data: T = await res.json()\r\n                setData(data)\r\n            }\r\n            catch (err: any) {\r\n                console.error(`[useFetchData] ${route}`, err)\r\n                setError(err.message)\r\n            }\r\n            finally {\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n\r\n    }, [route])\r\n\r\n    return { data, loading, error }\r\n}\r\n\r\nexport default useFetchData","const API_BASE = process.env.REACT_APP_API_BASE_URL;\r\n\r\nexport const SUMMARY_API = `${API_BASE}/summary`\r\n\r\nexport const SALE_DATA_WEEKLY_APL = `${API_BASE}/salesWeekly`\r\nexport const SALE_DATA_MONTH_APL = `${API_BASE}/saleMonth`\r\nexport const SALE_DATA_YEARLY_APL = `${API_BASE}/saleYearly`\r\n\r\nexport const PRODUCTS_API = `${API_BASE}/products`","// type\r\nimport { GridColTypeDef } from '@mui/x-data-grid';\r\n\r\nconst currencyFormatter = new Intl.NumberFormat('zh-TW', {\r\n    style: 'currency',\r\n    currency: 'TWD',\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n});\r\n\r\nexport const twdPrice: GridColTypeDef = {\r\n    type: 'number',\r\n    width: 130,\r\n    valueFormatter: (value: string) => currencyFormatter.format(Number(value)),\r\n};","const formatNumber = (value: number) => {\r\n    return new Intl.NumberFormat().format(value)\r\n}\r\n\r\nexport default formatNumber","// components\r\nimport { Card, CardContent, Typography } from \"@mui/material\"\r\n\r\n// type\r\nimport { InfoCardProps } from \"./infoCard.type\"\r\n\r\n// utils\r\nimport formatNumber from \"../../../utils/formatNumber\"\r\n\r\nconst InfoCard: React.FC<InfoCardProps> = (props) => {\r\n\r\n    const { title, span, value } = props\r\n\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Typography>{title}</Typography>\r\n                <Typography variant=\"h4\"><span>{span}</span>{formatNumber(value)}</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoCard","// components\r\nimport {\r\n    ResponsiveChartContainer,\r\n    LinePlot,\r\n    MarkPlot,\r\n    ChartsLegend,\r\n    ChartsTooltip,\r\n    ChartsAxisHighlight,\r\n    ChartsGrid,\r\n    ChartsXAxis,\r\n    ChartsYAxis,\r\n} from '@mui/x-charts'\r\nimport {\r\n    Box,\r\n    Typography,\r\n} from \"@mui/material\"\r\n\r\n// type\r\nimport { ResponsiveChartProps } from './ResponsiveChart.type'\r\n\r\nconst ResponsiveChart: React.FC<ResponsiveChartProps> = (props) => {\r\n\r\n    const { title, xAxis, series, dataset, sx } = props\r\n\r\n    return (\r\n        <Box sx={{ height: 500, minWidth: 600 }}>\r\n            {title && (\r\n                <Typography variant=\"h6\">\r\n                    {title}\r\n                </Typography>\r\n            )}\r\n            <ResponsiveChartContainer\r\n                xAxis={xAxis}\r\n                series={series}\r\n                dataset={dataset}\r\n                sx={sx}\r\n            >\r\n                <LinePlot />\r\n                <MarkPlot />\r\n                <ChartsTooltip />\r\n                <ChartsLegend position={{ horizontal: 'left', vertical: 'top' }} direction=\"row\" />\r\n                <ChartsAxisHighlight x=\"line\" y=\"line\" />\r\n                <ChartsGrid horizontal vertical />\r\n                <ChartsXAxis />\r\n                <ChartsYAxis />\r\n            </ResponsiveChartContainer>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ResponsiveChart","// hooks\r\nimport useFetchData from \"../hooks/useFetchData\"\r\n\r\n// type\r\nimport {\r\n    SummaryDataType,\r\n    SalesDataType\r\n} from \"../types/DashboardAPI.type\"\r\n\r\n// config\r\nimport { SUMMARY_API } from \"../config\"\r\n\r\nexport const SummaryData = () => {\r\n\r\n    const { data } = useFetchData<SummaryDataType>(SUMMARY_API)\r\n\r\n    return [\r\n        {\r\n            title: 'total_sales_amount',\r\n            span: '$',\r\n            value: data?.totalSales\r\n        },\r\n        {\r\n            title: 'order_quantity',\r\n            value: data?.totalOrders\r\n        },\r\n        {\r\n            title: 'member_quantity',\r\n            value: data?.totalCustomers\r\n        },\r\n    ]\r\n}\r\n\r\nexport const SalesData = (url: string) => {\r\n\r\n    const { data } = useFetchData<SalesDataType[]>(url)\r\n\r\n    const x = data?.map(item => item.date) || []\r\n    const y = data?.map(item => item.sales) || []\r\n\r\n    return { x, y }\r\n}","export const quickOperationButton = [\r\n    {\r\n        text: 'products'\r\n    },\r\n    {\r\n        text: 'orders'\r\n    },\r\n    {\r\n        text: 'customers'\r\n    },\r\n    {\r\n        text: 'setting'\r\n    }\r\n]","import { useState } from \"react\"\r\n\r\n// type\r\nimport { DateRange } from \"../types/DateRange.type\"\r\n\r\nconst useSelectChartDateRange = () => {\r\n    const [isActive, setActive] = useState<DateRange>('weekly')\r\n\r\n    const handleClick = (value: DateRange) => {\r\n        setActive(value)\r\n    }\r\n\r\n    return { isActive, handleClick }\r\n\r\n}\r\n\r\nexport default useSelectChartDateRange","// type\r\nimport { GridColDef } from '@mui/x-data-grid';\r\n\r\n// config\r\nimport { twdPrice } from './twdPrice';\r\n\r\nexport const columns: GridColDef[] = [\r\n    { field: 'id', headerName: 'ID', type: 'number', width: 70 },\r\n    { field: 'name', headerName: 'Name', width: 130 },\r\n    { field: 'state', headerName: 'State', width: 130 },\r\n    { field: 'sum', ...twdPrice },\r\n    { field: 'date', headerName: 'Date', type: 'dateTime', width: 200 },\r\n]","// components\r\nimport {\r\n    Grid,\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    ButtonGroup,\r\n    Button,\r\n    CardActions,\r\n    Typography,\r\n} from \"@mui/material\"\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport InfoCard from \"../components/common/card/infoCard\"\r\nimport ResponsiveChart from \"../components/common/responsiveChart/ResponsiveChart\"\r\n\r\n// data\r\nimport { SummaryData, SalesData } from \"../data/dashBoardData\"\r\nimport { quickOperationButton } from \"../data/quickOperationButton\";\r\n\r\n// api\r\nimport { SALE_DATA_WEEKLY_APL, SALE_DATA_MONTH_APL, SALE_DATA_YEARLY_APL } from \"../config\"\r\n\r\n// hooks\r\nimport { useTranslation } from \"react-i18next\"\r\nimport useSelectChartDateRange from \"../hooks/useSelectChartDateRange\";\r\nimport useIsMobile from \"../hooks/useIsMobile\";\r\n\r\n// config\r\nimport { columns as orderColumns } from \"../config/dashboardOrderDataGrid\";\r\n\r\nconst DashBoard = () => {\r\n\r\n    const { isMobile } = useIsMobile('sm')\r\n\r\n    const { t } = useTranslation()\r\n    const summary = SummaryData()\r\n\r\n    const salesWeekly = SalesData(SALE_DATA_WEEKLY_APL)\r\n    const saleMonth = SalesData(SALE_DATA_MONTH_APL)\r\n    const saleYearly = SalesData(SALE_DATA_YEARLY_APL)\r\n\r\n    const { isActive, handleClick } = useSelectChartDateRange()\r\n\r\n    const rows = [\r\n        { id: 1, name: 'Snow', state: 'Shipping', sum: 780, date: new Date('2025-04-11T10:30:00') },\r\n        { id: 2, name: 'Lannister', state: 'Shipping', sum: 500, date: new Date('2025-04-12T14:30:00') },\r\n        { id: 3, name: 'Bob', state: 'Completed', sum: 420, date: new Date('2025-04-16T19:30:00') }\r\n    ]\r\n\r\n    const paginationModel = { page: 0, pageSize: 5 };\r\n\r\n    return (\r\n        <>\r\n            <Grid container spacing={3}>\r\n                {summary && summary.map((item, index) => {\r\n                    return (\r\n                        <Grid size={{ xs: 12, sm: 4 }} key={index}>\r\n                            <InfoCard title={t(item.title)} span={item.span} value={item.value || 0} />\r\n                        </Grid>\r\n                    )\r\n                })}\r\n            </Grid>\r\n\r\n            <Box mt={6}>\r\n                <Card>\r\n                    <CardActions>\r\n                        <ButtonGroup sx={{ p: 2 }}>\r\n                            <Button\r\n                                onClick={() => handleClick('weekly')}\r\n                                variant={isActive === 'weekly' ? 'contained' : 'outlined'}\r\n                            >{t('weekly')}</Button>\r\n                            <Button\r\n                                onClick={() => handleClick('month')}\r\n                                variant={isActive === 'month' ? 'contained' : 'outlined'}\r\n                            >{t('monthly')}</Button>\r\n                            <Button\r\n                                onClick={() => handleClick('yearly')}\r\n                                variant={isActive === 'yearly' ? 'contained' : 'outlined'}\r\n                            >{t('yearly')}</Button>\r\n                        </ButtonGroup>\r\n                    </CardActions>\r\n                    <CardContent sx={{ width: '100%', overflowX: 'auto' }}>\r\n                        <ResponsiveChart\r\n                            sx={{ padding: 2 }}\r\n                            title={\r\n                                isActive === 'weekly' ?\r\n                                    `${t('weekly')} ${t('sales_Trend')}` :\r\n                                    isActive === 'month' ?\r\n                                        `${t('monthly')} ${t('sales_Trend')}` :\r\n                                        `${t('yearly')} ${t('sales_Trend')}`\r\n                            }\r\n                            xAxis={[{\r\n                                id: isActive === 'weekly' ? 'days' : isActive === 'month' ? 'month' : 'years',\r\n                                scaleType: 'point',\r\n                                data: isActive === 'weekly' ? salesWeekly.x : isActive === 'month' ? saleMonth.x : saleYearly.x\r\n                            }]}\r\n                            series={[{\r\n                                type: 'line',\r\n                                data: isActive === 'weekly' ? salesWeekly.y : isActive === 'month' ? saleMonth.y : saleYearly.y\r\n                            }]}\r\n                        />\r\n                    </CardContent>\r\n                </Card>\r\n            </Box>\r\n\r\n            {/* To Do Order API */}\r\n            <Box mt={6}>\r\n                <Typography variant=\"h5\">{t('latest_order')}</Typography>\r\n                <DataGrid\r\n                    sx={{ mt: 2 }}\r\n                    rows={rows}\r\n                    columns={orderColumns}\r\n                    initialState={{ pagination: { paginationModel } }}\r\n                    pageSizeOptions={[5, 10]}\r\n                    showToolbar\r\n                />\r\n            </Box>\r\n\r\n            <Box\r\n                mt={8}\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: isMobile ? 'column' : 'row',\r\n                    justifyContent: 'center',\r\n                    alignContent: 'center',\r\n                    gap: isMobile ? 1 : 3,\r\n                }}\r\n            >\r\n                {quickOperationButton.map((item, index) => {\r\n                    return (\r\n                        <Button\r\n                            key={index}\r\n                            variant=\"outlined\"\r\n                            size={isMobile ? 'medium' : 'large'}\r\n                            href={`store-backend/${item.text}`}\r\n                        >\r\n                            {t(item.text)}\r\n                        </Button>\r\n                    )\r\n                })}\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DashBoard"],"names":["breakpoints","theme","useTheme","isMobile","useMediaQuery","down","route","data","setData","useState","loading","setLoading","error","setError","useEffect","async","res","fetch","concat","ok","Error","status","json","err","console","message","fetchData","API_BASE","process","SUMMARY_API","SALE_DATA_WEEKLY_APL","SALE_DATA_MONTH_APL","SALE_DATA_YEARLY_APL","PRODUCTS_API","currencyFormatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","twdPrice","type","width","valueFormatter","value","format","Number","props","title","span","_jsx","Card","children","_jsxs","CardContent","Typography","variant","formatNumber","xAxis","series","dataset","sx","Box","height","minWidth","ResponsiveChartContainer","LinePlot","MarkPlot","ChartsTooltip","ChartsLegend","position","horizontal","vertical","direction","ChartsAxisHighlight","x","y","ChartsGrid","ChartsXAxis","ChartsYAxis","SalesData","url","useFetchData","map","item","date","sales","quickOperationButton","text","useSelectChartDateRange","isActive","setActive","handleClick","columns","field","headerName","_objectSpread","DashBoard","useIsMobile","t","useTranslation","summary","SummaryData","totalSales","totalOrders","totalCustomers","salesWeekly","saleMonth","saleYearly","rows","id","name","state","sum","Date","_Fragment","Grid","container","spacing","index","size","xs","sm","InfoCard","mt","CardActions","ButtonGroup","p","Button","onClick","overflowX","ResponsiveChart","padding","scaleType","DataGrid","orderColumns","initialState","pagination","paginationModel","page","pageSize","pageSizeOptions","showToolbar","display","flexDirection","justifyContent","alignContent","gap","href"],"sourceRoot":""}