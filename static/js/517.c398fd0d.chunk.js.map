{"version":3,"file":"static/js/517.c398fd0d.chunk.js","mappings":"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","sources":["hooks/useFormHooks.tsx","hooks/useIsMobile.tsx","hooks/useFetchData.tsx","components/common/imageUpload/imageUpload.tsx","components/common/fieldset/fieldset.tsx","components/common/dialog/messageDialog.tsx","data/revisionData.ts","features/product/useFormHandlers.tsx","hooks/useStatus.tsx","features/product/useLoadData.tsx","hooks/useMessageDialog.tsx","features/product/useFormWatchers.tsx","features/product/useImageHandler.tsx","features/product/useCategoryOptionsHandler.tsx","utils/uploadImageToCloudinary.tsx","utils/convertToArray.ts","hooks/productsData.tsx","features/useProductForm.tsx","views/revisionViews/productView.tsx","features/customers/useFormHandlers.tsx","features/customers/useLoadData.tsx","features/customers/useFormWatchers.tsx","features/useCustomersForm.tsx","views/revisionViews/customersView.tsx","views/revisionViews/index.tsx","pages/revision.tsx","config/apiConfig.ts"],"sourcesContent":["// hooks\r\nimport { useState } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\n// type\r\nimport { GridEventListener } from \"@mui/x-data-grid\"\r\n\r\nconst useFormHooks = () => {\r\n\r\n    const [rowDataId, setRowDataId] = useState<number | null>(null)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const handleBtnAdd = () => navigate('revision/add')\r\n    const handleBtnEdit = (id: number) => navigate(`revision/edit/${id}`)\r\n    const handleSelect: GridEventListener<'rowClick'> = (params) => {\r\n        if (params.id === rowDataId) {\r\n            setRowDataId(null) // Cancel\r\n        } else {\r\n            setRowDataId(params.id as number)\r\n        }\r\n    }\r\n    const handleCancel = () => navigate(-1)\r\n\r\n\r\n    return { rowDataId, setRowDataId, handleBtnAdd, handleBtnEdit, handleSelect, handleCancel }\r\n\r\n}\r\nexport default useFormHooks","// hooks\r\nimport { useMediaQuery, useTheme } from \"@mui/material\"\r\n\r\n// type\r\nimport { Breakpoint } from \"@mui/material\"\r\n\r\nconst useIsMobile = (breakpoints: Breakpoint) => {\r\n\r\n    const theme = useTheme();\r\n    const isMobile = useMediaQuery(theme.breakpoints.down(breakpoints))\r\n\r\n    return { isMobile }\r\n}\r\n\r\nexport default useIsMobile","import { useState, useEffect } from \"react\"\r\n\r\nconst useFetchData = <T,>(route: string): { data: T | null; loading: boolean; error: string | null } => {\r\n\r\n    const [data, setData] = useState<T | null>(null)\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n\r\n            setLoading(true)\r\n            setError(null)\r\n\r\n            try {\r\n                const res = await fetch(`${route}`)\r\n\r\n                if (!res.ok) throw new Error(`HTTP error ${res.status}`)\r\n                const data: T = await res.json()\r\n                setData(data)\r\n            }\r\n            catch (err: any) {\r\n                console.error(`[useFetchData] ${route}`, err)\r\n                setError(err.message) // Failed to fetch\r\n            }\r\n            finally {\r\n                setLoading(false)\r\n            }\r\n        }\r\n\r\n        fetchData()\r\n\r\n    }, [route])\r\n\r\n    return { data, loading, error }\r\n}\r\n\r\nexport default useFetchData","// components\r\nimport { Box, Button, Avatar } from \"@mui/material\"\r\nimport PhotoCamera from '@mui/icons-material/PhotoCamera';\r\n\r\n// hooks\r\nimport { useTranslation } from 'react-i18next';\r\nimport useIsMobile from '../../../hooks/useIsMobile';\r\n\r\n// type\r\nimport { imagesUploadType } from \"./imagesUpload.type\";\r\n\r\nconst ImagesUpload: React.FC<imagesUploadType> = (props) => {\r\n\r\n    const { t } = useTranslation()\r\n    const { isMobile } = useIsMobile('sm')\r\n    const { value, onChange } = props\r\n\r\n    return (\r\n        <Box\r\n            display='flex'\r\n            flexDirection={isMobile ? 'row' : 'column'}\r\n            alignItems='center'\r\n            gap={2}\r\n        >\r\n\r\n            <Avatar\r\n                variant='rounded'\r\n                src={value || ''}\r\n                sx={{\r\n                    minWidth: isMobile ? 60 : 120,\r\n                    height: isMobile ? 60 : 120,\r\n                    border: '1px solid #ccc'\r\n                }}\r\n            />\r\n\r\n            <input\r\n                accept=\"image/*\"\r\n                id=\"upload-image\"\r\n                type=\"file\"\r\n                style={{ display: 'none' }}\r\n                onChange={onChange}\r\n            />\r\n            <label htmlFor=\"upload-image\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    component=\"span\"\r\n                    startIcon={<PhotoCamera />}\r\n                    size={isMobile ? 'small' : 'medium'}\r\n                >\r\n                    {t('select_image')}\r\n                </Button>\r\n            </label>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ImagesUpload","// components\r\nimport {\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormLabel,\r\n    Switch,\r\n} from \"@mui/material\"\r\n\r\n// hooks\r\nimport { useTranslation } from \"react-i18next\"\r\n\r\n// types\r\nimport { fieldsetProps } from \"./fieldset.type\"\r\n\r\nconst Fieldset: React.FC<fieldsetProps> = (props) => {\r\n\r\n    const { t } = useTranslation()\r\n    const { label, isActive, onChange } = props\r\n\r\n    return (\r\n        <FormControl\r\n            component=\"fieldset\"\r\n            sx={{ border: '1px solid gray', p: 1, borderRadius: 1, minWidth: 150 }}\r\n        >\r\n            <FormLabel component=\"legend\">{t(label)}</FormLabel>\r\n            <FormControlLabel\r\n                control={\r\n                    <Switch\r\n                        checked={isActive}\r\n                        onChange={(e) => onChange(e.target.checked)}\r\n                    />}\r\n                label={isActive ? t('active') : t('disabled')}\r\n                labelPlacement=\"start\"\r\n            />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default Fieldset","// components\r\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from \"@mui/material\"\r\n\r\n// type\r\nimport { MessageDialogType } from \"./messageDialog.type\"\r\n\r\n// hooks\r\nimport { useTranslation } from \"react-i18next\"\r\n\r\nconst MessageDialog: React.FC<MessageDialogType> = (props) => {\r\n\r\n    const {\r\n        open,\r\n        onClose,\r\n        title,\r\n        content,\r\n        type = 'info',\r\n        inquiry = false,\r\n        onCancel,\r\n        onConfirm\r\n    } = props\r\n\r\n    const { t } = useTranslation()\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={onClose}\r\n        >\r\n            <DialogTitle color={type}>{title}</DialogTitle>\r\n            <DialogContent>\r\n                {content}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {inquiry ? (\r\n                    <>\r\n                        <Button color=\"error\" onClick={onConfirm}>{(t('confirm'))}</Button>\r\n                        <Button onClick={onCancel}>{t('cancel')}</Button>\r\n                    </>\r\n                ) : (\r\n                    <Button onClick={onConfirm || onClose}>{t('close')}</Button>\r\n                )}\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MessageDialog","// type\r\nimport { ResourceFormConfigs } from \"../types/RevisionType\"\r\n\r\nexport const formConfigs: ResourceFormConfigs = {\r\n    product: {\r\n        add: {\r\n            title: 'add_product',\r\n        },\r\n        edit: {\r\n            title: 'edit_product'\r\n        }\r\n    },\r\n    order: {\r\n        add: {\r\n            title: '',\r\n        },\r\n        edit: {\r\n            title: ''\r\n        }\r\n    },\r\n    customers: {\r\n        add: {\r\n            title: 'add_customers',\r\n        },\r\n        edit: {\r\n            title: 'edit_customers'\r\n        }\r\n    }\r\n}","// hooks\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\n// API\r\nimport { PRODUCTS_API } from \"../../config/apiConfig\"\r\n\r\n// type\r\nimport { useFormHandlersType } from \"./useFormHandlersType.type\"\r\nimport { ProductsDataType } from \"../../types/ProductsAPI.type\"\r\n\r\nconst useFormHandlers = ({\r\n    reset,\r\n    setImagesFile,\r\n    setLoading,\r\n    trigger,\r\n    setMessageDialog,\r\n    watch,\r\n    error,\r\n    imageFile,\r\n    uploadImageToCloudinary,\r\n    watchedSKU,\r\n    watchName,\r\n    watchedPrice,\r\n    watchedQty,\r\n    watchedMainCategory,\r\n    watchedSubCategory,\r\n    watchedStatus,\r\n    t,\r\n    setError,\r\n    showConfirmDialog\r\n}: useFormHandlersType) => {\r\n    const navigate = useNavigate()\r\n\r\n    const handleReset = () => {\r\n        reset()\r\n        setImagesFile(null)\r\n    }\r\n\r\n    const handleSave = async () => {\r\n        setLoading((prev) => ({ ...prev, save: true }))\r\n\r\n        const isValid = await trigger()\r\n        if (!isValid) {\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('fail'),\r\n                content: t('form_validation_fail'),\r\n                type: 'error'\r\n            })\r\n            setLoading((prev) => ({ ...prev, save: false }))\r\n            return\r\n        }\r\n\r\n        let imagesUrl = watch('images')\r\n        if (!error && imageFile) {\r\n            imagesUrl = await uploadImageToCloudinary(imageFile)\r\n        }\r\n\r\n        const payload = {\r\n            id: watchedSKU,\r\n            name: watchName,\r\n            price: watchedPrice,\r\n            qty: watchedQty,\r\n            mainCategory: watchedMainCategory,\r\n            subCategory: watchedSubCategory,\r\n            status: watchedStatus,\r\n            images: imagesUrl,\r\n            updatedAt: new Date()\r\n        }\r\n\r\n        await fetch(`${PRODUCTS_API}/${watchedSKU}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        })\r\n\r\n        console.log(payload)\r\n\r\n        setLoading((prev) => ({ ...prev, save: false }))\r\n        setMessageDialog({\r\n            open: true,\r\n            title: t('success'),\r\n            content: t('operation_completed'),\r\n            type: 'success'\r\n        })\r\n\r\n    }\r\n\r\n    const handleAdd = async () => {\r\n\r\n        setLoading((prev) => ({ ...prev, add: true }))\r\n\r\n        const isValid = await trigger()\r\n\r\n        if (!isValid) {\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('fail'),\r\n                content: t('form_validation_fail'),\r\n                type: 'error'\r\n            })\r\n            setLoading((prev) => ({ ...prev, add: false }))\r\n            return\r\n        }\r\n\r\n        const res = await fetch(PRODUCTS_API)\r\n        const existingProducts = await res.json()\r\n\r\n        const currentSKU = watch('id')\r\n\r\n        const skuExists = existingProducts.some((item: ProductsDataType) => item.id === currentSKU)\r\n        if (skuExists) {\r\n            setError('id', {\r\n                type: 'manual',\r\n                message: t('sku_already_exists')\r\n            })\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('fail'),\r\n                content: t('form_validation_fail'),\r\n                type: 'error'\r\n            })\r\n            setLoading((prev) => ({ ...prev, add: false }))\r\n            return\r\n        }\r\n\r\n        let imagesUrl = watch('images')\r\n        if (!error && imageFile) {\r\n            imagesUrl = await uploadImageToCloudinary(imageFile)\r\n        }\r\n\r\n        const payload = {\r\n            id: watchedSKU,\r\n            name: watchName,\r\n            price: watchedPrice,\r\n            qty: watchedQty,\r\n            mainCategory: watchedMainCategory,\r\n            subCategory: watchedSubCategory,\r\n            status: watchedStatus,\r\n            images: imagesUrl,\r\n            updatedAt: new Date()\r\n        }\r\n\r\n        await fetch(PRODUCTS_API, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        })\r\n\r\n        console.log(payload)\r\n\r\n        setMessageDialog({\r\n            open: true,\r\n            title: t('success'),\r\n            content: t('operation_completed'),\r\n            type: 'success'\r\n        })\r\n\r\n        reset()\r\n        setImagesFile(null)\r\n        setLoading((prev) => ({ ...prev, add: false }))\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n        if (!watchedSKU) return\r\n        setLoading((prev) => ({ ...prev, delete: true }))\r\n\r\n        const isConfirmed = await showConfirmDialog({\r\n            title: t('warning'),\r\n            content: t(\"are_you_sure_you_want_to_delete_this_data\"),\r\n            type: 'warning'\r\n        })\r\n\r\n        if (!isConfirmed) {\r\n            setLoading((prev) => ({ ...prev, delete: false }))\r\n            return\r\n        }\r\n\r\n        try {\r\n            const res = await fetch(`${PRODUCTS_API}/${watchedSKU}`, {\r\n                method: \"DELETE\",\r\n                headers: { 'Content-Type': 'application/json' }\r\n            })\r\n\r\n            if (!res.ok) throw new Error('刪除失敗')\r\n\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('success'),\r\n                content: `SKU: ${watchedSKU} ${t('deleted')}`,\r\n                type: 'success',\r\n                onConfirm() {\r\n                    setLoading((prev) => ({ ...prev, delete: false }))\r\n                    navigate(-1)\r\n                }\r\n            })\r\n\r\n            reset()\r\n            setImagesFile(null)\r\n        } catch (err) {\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('error'),\r\n                content: t('delete_fail'),\r\n                type: 'error'\r\n            })\r\n        }\r\n    }\r\n\r\n    return {\r\n        handleReset,\r\n        handleSave,\r\n        handleAdd,\r\n        handleDelete\r\n    }\r\n}\r\n\r\nexport default useFormHandlers","// hooks\r\nimport { useState } from \"react\"\r\n\r\n// type\r\nimport { loadingObject, messageDialog } from \"./types/useMessageDialog.type\"\r\n\r\nconst useStatus = () => {\r\n\r\n    const [loading, setLoading] = useState<loadingObject>({\r\n        save: false,\r\n        add: false,\r\n        delete: false\r\n    })\r\n\r\n    const [messageDialog, setMessageDialog] = useState<messageDialog>({\r\n        open: false,\r\n        title: '',\r\n        content: '',\r\n        type: 'info',\r\n        inquiry: false,\r\n        onConfirm: undefined,\r\n        onCancel: undefined\r\n    })\r\n\r\n    return {\r\n        loading,\r\n        setLoading,\r\n        messageDialog,\r\n        setMessageDialog\r\n    }\r\n}\r\n\r\nexport default useStatus","// hooks\r\nimport { useCallback } from \"react\";\r\nimport { UseFormReset, UseFormSetValue } from \"react-hook-form\"\r\n\r\n// type\r\nimport { ProductsDataType } from \"../../types/ProductsAPI.type\"\r\n\r\n// API\r\nimport { PRODUCTS_API } from \"../../config/apiConfig\";\r\n\r\nconst useLoadData = ({\r\n    reset,\r\n    setValue\r\n}: {\r\n    reset: UseFormReset<ProductsDataType>\r\n    setValue: UseFormSetValue<ProductsDataType>\r\n}) => {\r\n\r\n    const getFormDataFromId = useCallback(async (id: string) => {\r\n        try {\r\n            const res = await fetch(`${PRODUCTS_API}/${id}`)\r\n            if (!res.ok) throw new Error(\"Https Error\");\r\n            const data = await res.json()\r\n\r\n            if (!data) return\r\n\r\n            const mappedData = {\r\n                id: data.id,\r\n                name: data.name,\r\n                price: Number(data.price),\r\n                qty: Number(data.qty),\r\n                mainCategory: data.mainCategory || '',\r\n                subCategory: data.subCategory || '',\r\n                status: data.status ?? false,\r\n                images: data.images || ''\r\n            }\r\n\r\n            reset(mappedData)\r\n\r\n            if (data.images) {\r\n                setValue(\"images\", data.images)\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }, [reset, setValue])\r\n\r\n    return { getFormDataFromId }\r\n}\r\n\r\nexport default useLoadData","// type\r\nimport { messageDialog, showConfirmDialog } from \"./types/useMessageDialog.type\"\r\n\r\nconst useMessageDialog = ({\r\n    setMessageDialog\r\n}: {\r\n    setMessageDialog: React.Dispatch<React.SetStateAction<messageDialog>>\r\n}) => {\r\n\r\n    const showConfirmDialog = (config: showConfirmDialog) => {\r\n        return new Promise<boolean>((resolve) => {\r\n            setMessageDialog({\r\n                ...config,\r\n                open: true,\r\n                inquiry: true,\r\n                type: config.type ?? 'info',\r\n                onConfirm: () => {\r\n                    setMessageDialog((prev) => ({ ...prev, open: false }))\r\n                    resolve(true)\r\n                },\r\n                onCancel: () => {\r\n                    setMessageDialog((prev) => ({ ...prev, open: false }))\r\n                    resolve(false)\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setMessageDialog((prev) => ({\r\n            ...prev,\r\n            open: false\r\n        }))\r\n    }\r\n\r\n    return {\r\n        showConfirmDialog,\r\n        handleClose\r\n    }\r\n}\r\n\r\nexport default useMessageDialog","// hooks\r\nimport { UseFormWatch } from \"react-hook-form\"\r\n\r\n// type\r\nimport { ProductsDataType } from \"../../types/ProductsAPI.type\"\r\n\r\nconst useFormWatchers = (watch: UseFormWatch<ProductsDataType>) => {\r\n\r\n    const watchedSKU = watch('id')\r\n    const watchName = watch('name')\r\n    const watchedPrice = watch('price')\r\n    const watchedQty = watch('qty')\r\n    const watchedStatus = watch('status')\r\n    const watchedMainCategory = watch('mainCategory')\r\n    const watchedSubCategory = watch('subCategory')\r\n    const watchedImages = watch('images')\r\n\r\n    return {\r\n        watchedSKU,\r\n        watchName,\r\n        watchedPrice,\r\n        watchedQty,\r\n        watchedStatus,\r\n        watchedMainCategory,\r\n        watchedSubCategory,\r\n        watchedImages,\r\n    }\r\n\r\n}\r\n\r\nexport default useFormWatchers","// hooks\r\nimport { useState } from \"react\"\r\n\r\n// type\r\nimport { UseFormSetValue } from \"react-hook-form\"\r\nimport { ProductsDataType } from \"../../types/ProductsAPI.type\"\r\n\r\nconst useImageHandler = ({\r\n    setValue\r\n}: {\r\n    setValue: UseFormSetValue<ProductsDataType>\r\n}) => {\r\n\r\n    const [imageFile, setImagesFile] = useState<File | null>(null)\r\n\r\n    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0]\r\n\r\n        if (!file) return\r\n\r\n        const reader = new FileReader()\r\n        reader.onload = () => {\r\n            const base64 = reader.result as string\r\n            setValue(\"images\", base64)\r\n            setImagesFile(file)\r\n        }\r\n        reader.onerror = (error) => {\r\n            console.log('FileReader error:', error)\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    return {\r\n        imageFile, setImagesFile,handleImageChange\r\n    }\r\n}\r\n\r\nexport default useImageHandler","// hooks\r\nimport { useState } from \"react\"\r\n\r\n// type\r\nimport { categoriesType } from \"../../types/CategoriesType.type\"\r\n\r\nconst useCategoryOptionsHandler = () => {\r\n\r\n    const [categoryOptions, setCategoryOptions] = useState<categoriesType>({})\r\n\r\n    const handleMainCategoryChange = (value: string) => {\r\n        setCategoryOptions((prev) => {\r\n            if (!prev[value]) {\r\n                return {\r\n                    ...prev,\r\n                    [value]: []\r\n                }\r\n            }\r\n            return prev\r\n        })\r\n    }\r\n\r\n    return {\r\n        categoryOptions, setCategoryOptions, handleMainCategoryChange\r\n    }\r\n}\r\n\r\nexport default useCategoryOptionsHandler","// config\r\nimport { CLOUDINARY_API } from \"../config/apiConfig\"\r\n\r\nconst uploadImageToCloudinary = async (file: File): Promise<string> => {\r\n    const formData = new FormData()\r\n    formData.append(\"file\", file)\r\n    formData.append(\"upload_preset\", \"store_backend\")\r\n\r\n    const response = await fetch(CLOUDINARY_API, {\r\n        method: \"POST\",\r\n        body: formData\r\n    })\r\n\r\n    if (!response.ok) throw new Error(\"Images upload fail\")\r\n\r\n    const data = await response.json()\r\n    return data.secure_url\r\n}\r\n\r\nexport default uploadImageToCloudinary ","const convertToArray = (data: any) => {\r\n    const categoryMap: Record<string, Set<string>> = {}\r\n    for (const { mainCategory, subCategory } of data) {\r\n        if (!mainCategory || !subCategory) continue\r\n        if (!categoryMap[mainCategory]) {\r\n            categoryMap[mainCategory] = new Set()\r\n        }\r\n        categoryMap[mainCategory].add(subCategory)\r\n    }\r\n\r\n    const result: Record<string, string[]> = {}\r\n    for (const [main, subSet] of Object.entries(categoryMap)) {\r\n        result[main] = Array.from(subSet)\r\n    }\r\n    return result\r\n}\r\n\r\nexport default convertToArray","// hooks\r\nimport useFetchData from \"./useFetchData\"\r\n\r\n// type\r\nimport { ProductsDataType } from \"../types/ProductsAPI.type\";\r\n\r\n// api\r\nimport { PRODUCTS_API } from \"../config/apiConfig\";\r\n\r\nconst ProductsData = () => {\r\n\r\n    const { data, error, loading, ...rest } = useFetchData<ProductsDataType[]>(PRODUCTS_API)\r\n\r\n    const formattedData = data?.map((item) => ({\r\n        ...item,\r\n        updatedAt: new Date(item.updatedAt)\r\n    })) ?? []\r\n\r\n    return {\r\n        data: formattedData,\r\n        ...rest,\r\n        error,\r\n        loading\r\n    }\r\n}\r\n\r\nexport default ProductsData","// hooks\r\nimport { useEffect } from \"react\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport useFormHandlers from \"./product/useFormHandlers\"\r\nimport useStatus from '../hooks/useStatus'\r\nimport useLoadData from \"./product/useLoadData\"\r\nimport useMessageDialog from \"../hooks/useMessageDialog\"\r\nimport useFormWatchers from './product/useFormWatchers'\r\nimport useImageHandler from './product/useImageHandler'\r\nimport useCategoryOptionsHandler from './product/useCategoryOptionsHandler'\r\n\r\n// type\r\nimport { ProductsDataType } from \"../types/ProductsAPI.type\"\r\n\r\n// utils\r\nimport uploadImageToCloudinary from \"../utils/uploadImageToCloudinary\"\r\nimport convertToArray from '../utils/convertToArray'\r\n\r\n// data\r\nimport ProductsData from \"../hooks/productsData\";\r\n\r\nconst useProductForm = () => {\r\n\r\n    const { data, error } = ProductsData()\r\n\r\n    const { t } = useTranslation()\r\n\r\n    const {\r\n        register,\r\n        reset,\r\n        setValue,\r\n        watch,\r\n        control,\r\n        trigger,\r\n        setError,\r\n        formState: { errors }\r\n    } = useForm<ProductsDataType>({\r\n        mode: \"onBlur\",\r\n        defaultValues: {\r\n            id: \"\",\r\n            name: \"\",\r\n            price: 0,\r\n            qty: 0,\r\n            mainCategory: '',\r\n            subCategory: '',\r\n            status: false,\r\n            images: null\r\n        }\r\n    })\r\n\r\n    const {\r\n        watchedSKU,\r\n        watchName,\r\n        watchedPrice,\r\n        watchedQty,\r\n        watchedStatus,\r\n        watchedMainCategory,\r\n        watchedSubCategory,\r\n        watchedImages\r\n    } = useFormWatchers(watch)\r\n    const { categoryOptions, setCategoryOptions, handleMainCategoryChange } = useCategoryOptionsHandler()\r\n    const { imageFile, setImagesFile, handleImageChange } = useImageHandler({ setValue })\r\n\r\n    const { loading, setLoading, messageDialog, setMessageDialog } = useStatus()\r\n\r\n    const { getFormDataFromId } = useLoadData({ reset, setValue })\r\n\r\n    const { showConfirmDialog, handleClose } = useMessageDialog({ setMessageDialog })\r\n\r\n    const {\r\n        handleReset,\r\n        handleSave,\r\n        handleAdd,\r\n        handleDelete\r\n    } = useFormHandlers({\r\n        reset,\r\n        setImagesFile,\r\n        setLoading,\r\n        trigger,\r\n        setMessageDialog,\r\n        watch,\r\n        error,\r\n        imageFile,\r\n        uploadImageToCloudinary,\r\n        watchedSKU,\r\n        watchName,\r\n        watchedPrice,\r\n        watchedQty,\r\n        watchedMainCategory,\r\n        watchedSubCategory,\r\n        watchedStatus,\r\n        t,\r\n        setError,\r\n        showConfirmDialog\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!Array.isArray(data)) return\r\n        const category = convertToArray(data)\r\n\r\n        setCategoryOptions(prev => {\r\n            const isEqual = JSON.stringify(prev) === JSON.stringify(category)\r\n            return isEqual ? prev : category\r\n        })\r\n\r\n    }, [data, setCategoryOptions])\r\n\r\n    return {\r\n        register,\r\n        setValue,\r\n        reset,\r\n        control,\r\n        loading,\r\n        errors,\r\n        watchedSKU,\r\n        watchName,\r\n        watchedPrice,\r\n        watchedQty,\r\n        watchedStatus,\r\n        watchedMainCategory,\r\n        watchedSubCategory,\r\n        watchedImages,\r\n        messageDialog,\r\n\r\n        categoryOptions,\r\n        imageFile,\r\n        error,\r\n\r\n        setImagesFile,\r\n        setMessageDialog,\r\n\r\n        getFormDataFromId,\r\n        handleMainCategoryChange,\r\n        handleImageChange,\r\n        handleAdd,\r\n        handleSave,\r\n        handleReset,\r\n        handleDelete,\r\n        handleClose,\r\n    }\r\n\r\n}\r\n\r\nexport default useProductForm","// components\r\nimport {\r\n    Box,\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    ButtonGroup,\r\n    TextField,\r\n    Autocomplete\r\n} from \"@mui/material\"\r\nimport ImagesUpload from \"../../components/common/imageUpload/imageUpload\"\r\nimport Fieldset from \"../../components/common/fieldset/fieldset\"\r\nimport { Controller } from \"react-hook-form\"\r\nimport MessageDialog from \"../../components/common/dialog/messageDialog\"\r\n\r\n// data\r\nimport { formConfigs } from \"../../data/revisionData\"\r\n\r\n// type\r\nimport { RevisionType } from \"../../types/RevisionType\"\r\n\r\n// hooks\r\nimport { useEffect } from \"react\"\r\nimport { useParams } from 'react-router-dom'\r\nimport { useTranslation } from \"react-i18next\"\r\nimport useIsMobile from \"../../hooks/useIsMobile\"\r\nimport useProductForm from \"../../features/useProductForm\"\r\nimport useFormHooks from \"../../hooks/useFormHooks\"\r\n\r\nconst ProductView: React.FC<RevisionType> = (props) => {\r\n\r\n    const { mode, resource } = props\r\n    const { id } = useParams<{ id: string }>()\r\n    const formConfig = formConfigs[resource]?.[mode]\r\n\r\n    const { isMobile } = useIsMobile('md')\r\n    const { t } = useTranslation()\r\n\r\n    const {\r\n        register,\r\n        control,\r\n        errors,\r\n        loading,\r\n        messageDialog,\r\n\r\n        watchedMainCategory,\r\n        watchedImages,\r\n        categoryOptions,\r\n\r\n        handleReset,\r\n        handleAdd,\r\n        handleSave,\r\n        handleDelete,\r\n        handleClose,\r\n        getFormDataFromId,\r\n        handleImageChange\r\n    } = useProductForm()\r\n\r\n    const { handleCancel } = useFormHooks()\r\n    const mainCategories = Object.keys(categoryOptions)\r\n\r\n    useEffect(() => {\r\n        if (id) getFormDataFromId(id)\r\n    }, [id, getFormDataFromId])\r\n\r\n    return (\r\n        <Box\r\n            component=\"form\"\r\n            sx={{\r\n                p: 3,\r\n                bgcolor: \"background.paper\",\r\n                borderRadius: 2,\r\n                boxShadow: 2,\r\n                height: 'calc( 100vh - 140px )'\r\n            }}\r\n        >\r\n            <Grid container size={12} height={'100%'}>\r\n                <Grid size={12}>\r\n                    <Typography variant=\"h5\" mb={2} fontWeight={600}>\r\n                        {t(formConfig.title)}\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid\r\n                    container\r\n                    spacing={3}\r\n                    sx={{ overflowY: 'auto', height: 'calc( 100% - 140px )' }}\r\n                >\r\n                    <Grid\r\n                        size={{ xs: 12, md: 8 }}\r\n                        pt={1}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid size={{ xs: 12 }} >\r\n                                <Controller\r\n                                    name=\"id\"\r\n                                    control={control}\r\n                                    rules={{ required: t('this_field_is_required') }}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            {...field}\r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            label=\"SKU\"\r\n                                            required\r\n                                            error={!!errors.id}\r\n                                            helperText={errors.id?.message}\r\n                                            placeholder={t('input_product_serial_number')}\r\n                                            slotProps={{\r\n                                                input: {\r\n                                                    readOnly: mode === 'edit',\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n\r\n                            </Grid>\r\n                            <Grid size={{ xs: 12 }}>\r\n                                <Controller\r\n                                    name=\"name\"\r\n                                    control={control}\r\n                                    rules={{ required: t('this_field_is_required') }}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            {...field}\r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            label={t('product_name')}\r\n                                            required\r\n                                            error={!!errors.name}\r\n                                            helperText={errors.name?.message}\r\n                                        />\r\n                                    )}\r\n                                />\r\n\r\n                            </Grid>\r\n                            <Grid size={{ xs: 12, md: 6 }}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    label={t('price')}\r\n                                    id=\"price\"\r\n                                    type=\"number\"\r\n                                    required\r\n                                    {...register(\"price\", {\r\n                                        required: t('this_field_is_required'),\r\n                                        valueAsNumber: true,\r\n                                        min: {\r\n                                            value: 0,\r\n                                            message: t('price_cannot_be_less_than_0')\r\n                                        }\r\n                                    })}\r\n                                    error={!!errors.price}\r\n                                    helperText={errors.price?.message}\r\n                                />\r\n                            </Grid>\r\n                            <Grid size={{ xs: 12, md: 6 }}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    label={t('quantity')}\r\n                                    id=\"qty\"\r\n                                    type=\"number\"\r\n                                    required\r\n                                    {...register(\"qty\", {\r\n                                        required: t('this_field_is_required'),\r\n                                        valueAsNumber: true,\r\n                                        min: {\r\n                                            value: 0,\r\n                                            message: t('price_cannot_be_less_than_0')\r\n                                        }\r\n                                    })}\r\n                                    error={!!errors.qty}\r\n                                    helperText={errors.qty?.message}\r\n                                />\r\n                            </Grid>\r\n                            <Grid container size={{ xs: 12 }}>\r\n                                <Grid size={6}>\r\n                                    <Controller\r\n                                        name=\"mainCategory\"\r\n                                        control={control}\r\n                                        render={({ field }) => (\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                options={mainCategories}\r\n                                                value={field.value}\r\n                                                onInputChange={(e, value) => field.onChange(value)}\r\n                                                onChange={(e, value) => field.onChange(value || '')}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n                                                        label={t('product_category')}\r\n                                                        variant=\"outlined\"\r\n                                                        placeholder={t('input_or_select_category')}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid size={6}>\r\n                                    <Controller\r\n                                        name=\"subCategory\"\r\n                                        control={control}\r\n                                        render={({ field }) => (\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                value={field.value}\r\n                                                options={Array.isArray(categoryOptions[watchedMainCategory]) ? categoryOptions[watchedMainCategory] : []}\r\n                                                disabled={!watchedMainCategory}\r\n                                                onInputChange={(e, value) => field.onChange(value)}\r\n                                                onChange={(e, value) => field.onChange(value || '')}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        {...params}\r\n                                                        label={t('subcategory')}\r\n                                                        variant=\"outlined\"\r\n                                                        placeholder={t('input_or_select_subcategory')}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                        container\r\n                        size={{ xs: 12, md: 4 }}\r\n                        display={isMobile ? 'flex' : 'grid'}\r\n                        gap={isMobile ? 1 : 4}\r\n                        pb={1}\r\n                        sx={{ placeContent: !isMobile ? 'flex-start' : 'space-between' }}\r\n                    >\r\n                        <Grid order={isMobile ? 2 : 1}>\r\n                            <Controller\r\n                                name=\"images\"\r\n                                control={control}\r\n                                render={() => (\r\n                                    <ImagesUpload\r\n                                        value={watchedImages}\r\n                                        onChange={handleImageChange}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                        <Grid order={isMobile ? 1 : 2}>\r\n                            <Controller\r\n                                name=\"status\"\r\n                                control={control}\r\n                                render={({ field }) => (\r\n                                    <Fieldset\r\n                                        label=\"product_status\"\r\n                                        isActive={field.value}\r\n                                        onChange={field.onChange}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* Button Area */}\r\n                <Grid size={12}>\r\n                    <Box\r\n                        mt={4}\r\n                        display=\"flex\"\r\n                        justifyContent=\"center\"\r\n                        gap={2}\r\n                    >\r\n                        <ButtonGroup variant=\"outlined\">\r\n                            <Button\r\n                                onClick={mode === 'add' ? handleAdd : handleSave}\r\n                                loading={mode === 'add' ? loading.add : loading.save}\r\n                            >\r\n                                {mode === 'add' ? t(\"add\") : t(\"save\")}\r\n                            </Button>\r\n                            <Button onClick={handleReset}>{t(\"reset\")}</Button>\r\n                            {mode === 'edit' && (\r\n                                <Button\r\n                                    color=\"error\"\r\n                                    onClick={handleDelete}\r\n                                    loading={loading.delete}\r\n                                >\r\n                                    {t('delete')}\r\n                                </Button>\r\n                            )}\r\n                        </ButtonGroup>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"error\"\r\n                            onClick={handleCancel}\r\n                        >\r\n                            {t(\"cancel\")}\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n            <MessageDialog\r\n                title={messageDialog.title}\r\n                content={messageDialog.content}\r\n                open={messageDialog.open}\r\n                type={messageDialog.type}\r\n                onConfirm={messageDialog.onConfirm}\r\n                onCancel={messageDialog.onCancel}\r\n                onClose={handleClose}\r\n                inquiry={messageDialog.inquiry}\r\n            />\r\n        </Box >\r\n    )\r\n}\r\n\r\nexport default ProductView","// hooks\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { UseFormReset, UseFormSetError, UseFormTrigger, UseFormWatch } from \"react-hook-form\"\r\n\r\n// type\r\nimport { CustomerDataType } from \"../../types/CustomerApi.type\"\r\nimport { loadingObject, messageDialog, showConfirmDialog } from \"../../hooks/types/useMessageDialog.type\"\r\nimport type { TFunction } from \"i18next\"\r\n\r\nconst useFormHandlers = ({\r\n    reset,\r\n    trigger,\r\n    API,\r\n    watch,\r\n    watchedCustomerId,\r\n    watchedUserName,\r\n    watchedEmail,\r\n    watchedPhone,\r\n    watchedStatus,\r\n    setLoading,\r\n    setMessageDialog,\r\n    t,\r\n    showConfirmDialog,\r\n    setError\r\n}: {\r\n    reset: UseFormReset<CustomerDataType>\r\n    trigger: UseFormTrigger<CustomerDataType>\r\n    API: string\r\n    watch: UseFormWatch<CustomerDataType>\r\n    watchedCustomerId: string\r\n    watchedUserName: string\r\n    watchedEmail: string\r\n    watchedPhone: string\r\n    watchedStatus: boolean\r\n    t: TFunction\r\n    setLoading: React.Dispatch<React.SetStateAction<loadingObject>>\r\n    setMessageDialog: React.Dispatch<React.SetStateAction<messageDialog>>\r\n    showConfirmDialog: (config: showConfirmDialog) => Promise<boolean>\r\n    setError: UseFormSetError<CustomerDataType>\r\n}) => {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const handleReset = () => reset()\r\n    const handleAdd = async () => {\r\n\r\n        setLoading((prev) => ({ ...prev, add: true }))\r\n\r\n        const isValid = await trigger()\r\n        if (!isValid) {\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('fail'),\r\n                content: t('form_validation_fail'),\r\n                type: 'error'\r\n            })\r\n            setLoading((prev) => ({ ...prev, add: false }))\r\n            return\r\n        }\r\n\r\n        const res = await fetch(API)\r\n        const existingCustomers = await res.json()\r\n\r\n        const currentSKU = watch('id')\r\n\r\n        const skuExists = existingCustomers.some((item: CustomerDataType) => item.id === currentSKU)\r\n        if (skuExists) {\r\n            setError('id', {\r\n                type: 'manual',\r\n                message: t('sku_already_exists')\r\n            })\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('fail'),\r\n                content: t('form_validation_fail'),\r\n                type: 'error'\r\n            })\r\n            setLoading((prev) => ({ ...prev, add: false }))\r\n            return\r\n        }\r\n\r\n        const payload = {\r\n            id: watchedCustomerId,\r\n            username: watchedUserName,\r\n            email: watchedEmail,\r\n            phone: watchedPhone,\r\n            status: watchedStatus,\r\n            createdAt: new Date()\r\n        }\r\n\r\n        await fetch(API, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        })\r\n\r\n        console.log(payload)\r\n\r\n        setMessageDialog({\r\n            open: true,\r\n            title: t('success'),\r\n            content: t('operation_completed'),\r\n            type: 'success'\r\n        })\r\n        reset()\r\n        setLoading((prev) => ({ ...prev, add: false }))\r\n    }\r\n\r\n    const handleSave = async () => {\r\n\r\n        setLoading((prev) => ({ ...prev, save: true }))\r\n\r\n        const isValid = await trigger()\r\n\r\n        if (!isValid) {\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('fail'),\r\n                content: t('form_validation_fail'),\r\n                type: 'error'\r\n            })\r\n            setLoading((prev) => ({ ...prev, save: false }))\r\n            return\r\n        }\r\n\r\n        const payload = {\r\n            id: watchedCustomerId,\r\n            username: watchedUserName,\r\n            email: watchedEmail,\r\n            phone: watchedPhone,\r\n            status: watchedStatus,\r\n        }\r\n\r\n        await fetch(`${API}/${watchedCustomerId}`, {\r\n            method: 'PATCH',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(payload)\r\n        })\r\n\r\n        console.log(payload)\r\n\r\n        setLoading((prev) => ({ ...prev, save: false }))\r\n        setMessageDialog({\r\n            open: true,\r\n            title: t('success'),\r\n            content: t('operation_completed'),\r\n            type: 'success'\r\n        })\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n        if (!watchedCustomerId) return\r\n        setLoading((prev) => ({ ...prev, delete: true }))\r\n\r\n        const isConfirmed = await showConfirmDialog({\r\n            title: t('warning'),\r\n            content: t(\"are_you_sure_you_want_to_delete_this_data\"),\r\n            type: 'warning'\r\n        })\r\n\r\n        if (!isConfirmed) {\r\n            setLoading((prev) => ({ ...prev, delete: false }))\r\n            return\r\n        }\r\n\r\n        try {\r\n            const res = await fetch(`${API}/${watchedCustomerId}`, {\r\n                method: \"DELETE\",\r\n                headers: { 'Content-Type': 'application/json' }\r\n            })\r\n\r\n            if (!res.ok) throw new Error('刪除失敗')\r\n\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('success'),\r\n                content: `SKU: ${watchedCustomerId} ${t('deleted')}`,\r\n                type: 'success',\r\n                onConfirm() {\r\n                    setLoading((prev) => ({ ...prev, delete: false }))\r\n                    navigate(-1)\r\n                }\r\n            })\r\n\r\n            reset()\r\n        } catch (err) {\r\n            setMessageDialog({\r\n                open: true,\r\n                title: t('error'),\r\n                content: t('delete_fail'),\r\n                type: 'error'\r\n            })\r\n        }\r\n    }\r\n\r\n    return {\r\n        handleReset,\r\n        handleAdd,\r\n        handleSave,\r\n        handleDelete\r\n    }\r\n}\r\n\r\nexport default useFormHandlers","// hooks\r\nimport { useCallback } from \"react\";\r\nimport { UseFormReset } from \"react-hook-form\"\r\n\r\n// type\r\nimport { CustomerDataType } from \"../../types/CustomerApi.type\";\r\n\r\nconst useLoadData = ({\r\n    reset,\r\n    API\r\n}: {\r\n    reset: UseFormReset<CustomerDataType>\r\n    API: string\r\n}) => {\r\n\r\n    const getFormDataFromId = useCallback(async (id: string) => {\r\n        try {\r\n            const res = await fetch(`${API}/${id}`)\r\n            if (!res.ok) throw new Error(\"Https Error\");\r\n            const data = await res.json()\r\n\r\n            if (!data) return\r\n\r\n            const mappedData = {\r\n                id: data.id,\r\n                username: data.username,\r\n                email: data.email,\r\n                phone: data.phone,\r\n                status: data.status\r\n            }\r\n\r\n            reset(mappedData)\r\n            console.log(mappedData)\r\n\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }, [API, reset])\r\n\r\n    return { getFormDataFromId }\r\n}\r\n\r\nexport default useLoadData","// hooks\r\nimport { UseFormWatch } from \"react-hook-form\"\r\n\r\n// type\r\nimport { CustomerDataType } from \"../../types/CustomerApi.type\"\r\n\r\nconst useFormWatchers = (watch: UseFormWatch<CustomerDataType>) => {\r\n\r\n    const watchedCustomerId = watch('id')\r\n    const watchedUserName = watch('username')\r\n    const watchedEmail = watch('email')\r\n    const watchedPhone = watch('phone')\r\n    const watchedStatus = watch('status')\r\n\r\n    return { watchedCustomerId, watchedUserName, watchedEmail, watchedPhone, watchedStatus }\r\n}\r\n\r\nexport default useFormWatchers","// hooks\r\nimport { useForm } from \"react-hook-form\"\r\nimport useFormHandlers from \"./customers/useFormHandlers\"\r\nimport useLoadData from \"./customers/useLoadData\"\r\nimport useFormWatchers from \"./customers/useFormWatchers\"\r\nimport useStatus from \"../hooks/useStatus\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport useMessageDialog from \"../hooks/useMessageDialog\"\r\n\r\n// type\r\nimport { CustomerDataType } from \"../types/CustomerApi.type\"\r\n\r\n// config\r\nimport { CUSTOMERS_API } from \"../config/apiConfig\"\r\n\r\nconst useCustomersForm = () => {\r\n\r\n    const { t } = useTranslation()\r\n\r\n    const {\r\n        register,\r\n        reset,\r\n        watch,\r\n        control,\r\n        trigger,\r\n        setError,\r\n        formState: { errors }\r\n    } = useForm<CustomerDataType>({\r\n        mode: \"onBlur\",\r\n        defaultValues: {\r\n            id: \"\",\r\n            username: \"\",\r\n            email: '',\r\n            phone: '',\r\n            status: false\r\n        }\r\n    })\r\n\r\n    const { watchedCustomerId, watchedUserName, watchedEmail, watchedPhone, watchedStatus } = useFormWatchers(watch)\r\n\r\n    const { getFormDataFromId } = useLoadData({ reset, API: CUSTOMERS_API })\r\n\r\n    const { loading, setLoading, messageDialog, setMessageDialog } = useStatus()\r\n\r\n    const { showConfirmDialog, handleClose } = useMessageDialog({ setMessageDialog })\r\n\r\n    const { handleReset, handleAdd, handleSave, handleDelete } = useFormHandlers({\r\n        reset,\r\n        trigger,\r\n        API: CUSTOMERS_API,\r\n        watch,\r\n        watchedCustomerId,\r\n        watchedUserName,\r\n        watchedEmail,\r\n        watchedPhone,\r\n        watchedStatus,\r\n        t,\r\n        setLoading,\r\n        setMessageDialog,\r\n        showConfirmDialog,\r\n        setError\r\n    })\r\n\r\n    return {\r\n        register,\r\n        control,\r\n        handleAdd,\r\n        handleReset,\r\n        handleSave,\r\n        getFormDataFromId,\r\n        loading,\r\n        messageDialog,\r\n        errors,\r\n        handleClose,\r\n        handleDelete,\r\n        watch\r\n    }\r\n}\r\n\r\nexport default useCustomersForm","// components\r\nimport {\r\n    Box,\r\n    Grid,\r\n    Typography,\r\n    Button,\r\n    ButtonGroup,\r\n    TextField,\r\n} from \"@mui/material\"\r\nimport { Controller } from \"react-hook-form\"\r\nimport Fieldset from \"../../components/common/fieldset/fieldset\"\r\nimport MessageDialog from \"../../components/common/dialog/messageDialog\"\r\n\r\n// data\r\nimport { formConfigs } from \"../../data/revisionData\"\r\n\r\n// type\r\nimport { RevisionType } from \"../../types/RevisionType\"\r\n\r\n// hooks\r\nimport { useEffect } from \"react\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport useCustomersForm from \"../../features/useCustomersForm\"\r\nimport useFormHooks from \"../../hooks/useFormHooks\"\r\n\r\nconst CustomersView: React.FC<RevisionType> = (props) => {\r\n\r\n    const { mode, resource } = props\r\n    const { id } = useParams<{ id: string }>()\r\n    const formConfig = formConfigs[resource]?.[mode]\r\n    const { t } = useTranslation()\r\n\r\n    const {\r\n        control,\r\n        getFormDataFromId,\r\n        handleReset,\r\n        handleAdd,\r\n        handleSave,\r\n        loading,\r\n        messageDialog,\r\n        errors,\r\n        handleClose,\r\n        handleDelete,\r\n        watch\r\n    } = useCustomersForm()\r\n\r\n    const { handleCancel } = useFormHooks()\r\n\r\n    useEffect(() => {\r\n        if (id) getFormDataFromId(id)\r\n    }, [id, getFormDataFromId])\r\n\r\n    return (\r\n        <Box\r\n            component=\"form\"\r\n            sx={{\r\n                p: 3,\r\n                bgcolor: \"background.paper\",\r\n                borderRadius: 2,\r\n                boxShadow: 2,\r\n                height: 'calc( 100vh - 140px )'\r\n            }}\r\n        >\r\n            <Grid container size={12} height={'100%'} >\r\n                <Grid size={12} >\r\n                    <Typography variant=\"h5\" mb={2} fontWeight={600}>\r\n                        {t(formConfig.title)}\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid\r\n                    container\r\n                    spacing={3}\r\n                    size={12}\r\n                    sx={{ overflowY: 'auto', height: 'calc( 100% - 140px )' }}\r\n                >\r\n                    <Grid\r\n                        size={{ xs: 12, md: 8 }}\r\n                        pt={1}\r\n                    >\r\n                        <Grid container spacing={2}>\r\n                            <Grid size={{ xs: 12, md: 10 }}>\r\n                                <Controller\r\n                                    name=\"id\"\r\n                                    control={control}\r\n                                    rules={{ required: t('this_field_is_required') }}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            {...field}\r\n                                            fullWidth\r\n                                            required\r\n                                            error={!!errors.id}\r\n                                            helperText={errors.id?.message}\r\n                                            label={t('customer_id')}\r\n                                            variant=\"outlined\"\r\n                                            slotProps={{\r\n                                                input: {\r\n                                                    readOnly: mode === 'edit',\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n\r\n                            </Grid>\r\n                            <Grid size={{ xs: 12, md: 10 }}>\r\n                                <Controller\r\n                                    name=\"username\"\r\n                                    control={control}\r\n                                    rules={{ required: t('this_field_is_required') }}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            {...field}\r\n                                            fullWidth\r\n                                            required\r\n                                            error={!!errors.username}\r\n                                            helperText={errors.username?.message}\r\n                                            label={t('username')}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Grid>\r\n                            <Grid size={{ xs: 12, md: 10 }}>\r\n                                <Controller\r\n                                    name=\"email\"\r\n                                    control={control}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            {...field}\r\n                                            fullWidth\r\n                                            label={t('email')}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Grid>\r\n                            <Grid size={{ xs: 12, md: 10 }}>\r\n                                <Controller\r\n                                    name=\"phone\"\r\n                                    control={control}\r\n                                    render={({ field }) => (\r\n                                        <TextField\r\n                                            {...field}\r\n                                            fullWidth\r\n                                            label={t('phone')}\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                        container\r\n                        size={{ xs: 12, md: 4 }}\r\n                        pb={1}\r\n                    >\r\n                        <Grid>\r\n                            <Controller\r\n                                name=\"status\"\r\n                                control={control}\r\n                                render={({ field }) => (\r\n                                    <Fieldset\r\n                                        label=\"customer_status\"\r\n                                        isActive={field.value}\r\n                                        onChange={field.onChange}\r\n                                    />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid size={12}>\r\n                    <Box\r\n                        mt={4}\r\n                        display=\"flex\"\r\n                        justifyContent=\"center\"\r\n                        gap={2}\r\n                    >\r\n                        <ButtonGroup variant=\"outlined\">\r\n                            <Button\r\n                                onClick={mode === 'add' ? handleAdd : handleSave}\r\n                                loading={mode === 'add' ? loading.add : loading.save}\r\n                            >\r\n                                {mode === 'add' ? t(\"add\") : t(\"save\")}\r\n                            </Button>\r\n                            <Button onClick={handleReset}>{t(\"reset\")}</Button>\r\n                            {mode === 'edit' && (\r\n                                <Button\r\n                                    onClick={handleDelete}\r\n                                    color=\"error\"\r\n                                >\r\n                                    {t('delete')}\r\n                                </Button>\r\n                            )}\r\n                        </ButtonGroup>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"error\"\r\n                            onClick={handleCancel}\r\n                        >\r\n                            {t(\"cancel\")}\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <MessageDialog\r\n                title={messageDialog.title}\r\n                content={messageDialog.content}\r\n                open={messageDialog.open}\r\n                type={messageDialog.type}\r\n                onConfirm={messageDialog.onConfirm}\r\n                onCancel={messageDialog.onCancel}\r\n                onClose={handleClose}\r\n                inquiry={messageDialog.inquiry}\r\n            />\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default CustomersView","// view\r\nimport ProductView from './productView'\r\nimport CustomersView from './customersView'\r\n\r\n// type\r\nimport { Mode, Resource } from '../../types/RevisionType'\r\n\r\nconst getRevisionView = ({ resource, mode }: { resource: Resource, mode: Mode }) => {\r\n    switch (resource) {\r\n        case 'product':\r\n            return (<ProductView resource='product' mode={mode} />)\r\n        case 'customers':\r\n            return (<CustomersView resource='customers' mode={mode} />)\r\n        default:\r\n            throw new Error(`Unknown resource: ${resource}`)\r\n    }\r\n}\r\n\r\nexport default getRevisionView","// view\r\nimport getRevisionView from \"../views/revisionViews\"\r\n\r\n// type\r\nimport { Resource, Mode } from \"../types/RevisionType\"\r\n\r\nconst Revision = ({ resource, mode }: { resource: Resource, mode: Mode }) => {\r\n    return getRevisionView({ resource, mode })\r\n}\r\n\r\nexport default Revision","const API_BASE = process.env.REACT_APP_API_BASE_URL;\r\n\r\nexport const SUMMARY_API = `${API_BASE}/summary`\r\n\r\nexport const SALE_DATA_WEEKLY_APL = `${API_BASE}/salesWeekly`\r\nexport const SALE_DATA_MONTH_APL = `${API_BASE}/saleMonth`\r\nexport const SALE_DATA_YEARLY_APL = `${API_BASE}/saleYearly`\r\n\r\nexport const PRODUCTS_API = `${API_BASE}/products`\r\nexport const CUSTOMERS_API = `${API_BASE}/customers`\r\n\r\nexport const CLOUDINARY_API = 'https://api.cloudinary.com/v1_1/ddzpuxyjr/image/upload'"],"names":["useFormHooks","rowDataId","setRowDataId","useState","navigate","useNavigate","handleBtnAdd","handleBtnEdit","id","concat","handleSelect","params","handleCancel","breakpoints","theme","useTheme","isMobile","useMediaQuery","down","route","data","setData","loading","setLoading","error","setError","useEffect","async","res","fetch","ok","Error","status","json","err","console","message","fetchData","props","t","useTranslation","useIsMobile","value","onChange","_jsxs","Box","display","flexDirection","alignItems","gap","children","_jsx","Avatar","variant","src","sx","minWidth","height","border","accept","type","style","htmlFor","Button","color","component","startIcon","PhotoCamera","size","label","isActive","FormControl","p","borderRadius","FormLabel","FormControlLabel","control","Switch","checked","e","target","labelPlacement","open","onClose","title","content","inquiry","onCancel","onConfirm","Dialog","DialogTitle","DialogContent","DialogActions","_Fragment","onClick","formConfigs","product","add","edit","order","customers","_ref","reset","setImagesFile","trigger","setMessageDialog","watch","imageFile","uploadImageToCloudinary","watchedSKU","watchName","watchedPrice","watchedQty","watchedMainCategory","watchedSubCategory","watchedStatus","showConfirmDialog","handleReset","handleSave","prev","_objectSpread","save","imagesUrl","payload","name","price","qty","mainCategory","subCategory","images","updatedAt","Date","PRODUCTS_API","method","headers","body","JSON","stringify","log","handleAdd","existingProducts","currentSKU","some","item","handleDelete","delete","useStatus","messageDialog","undefined","setValue","getFormDataFromId","useCallback","_data$status","mappedData","Number","config","Promise","resolve","_config$type","handleClose","watchedImages","handleImageChange","_e$target$files","file","files","reader","FileReader","onload","base64","result","onerror","readAsDataURL","useCategoryOptionsHandler","categoryOptions","setCategoryOptions","handleMainCategoryChange","formData","FormData","append","response","CLOUDINARY_API","secure_url","categoryMap","Set","main","subSet","Object","entries","Array","from","ProductsData","_data$map","_useFetchData","useFetchData","rest","_objectWithoutProperties","_excluded","formattedData","map","useProductForm","register","formState","errors","useForm","mode","defaultValues","useFormWatchers","useImageHandler","useLoadData","useMessageDialog","useFormHandlers","isArray","category","convertToArray","_formConfigs$resource","_errors$price","_errors$qty","resource","useParams","formConfig","mainCategories","keys","bgcolor","boxShadow","Grid","container","Typography","mb","fontWeight","spacing","overflowY","xs","md","pt","Controller","rules","required","render","_errors$id","field","TextField","fullWidth","helperText","placeholder","slotProps","input","readOnly","_ref2","_errors$name","valueAsNumber","min","_ref3","Autocomplete","freeSolo","options","onInputChange","renderInput","_ref4","disabled","pb","placeContent","ImagesUpload","_ref5","Fieldset","mt","justifyContent","ButtonGroup","MessageDialog","API","watchedCustomerId","watchedUserName","watchedEmail","watchedPhone","existingCustomers","username","email","phone","createdAt","useCustomersForm","CUSTOMERS_API","_errors$username","ProductView","CustomersView","getRevisionView","API_BASE","process","SUMMARY_API","SALE_DATA_WEEKLY_APL","SALE_DATA_MONTH_APL","SALE_DATA_YEARLY_APL"],"sourceRoot":""}